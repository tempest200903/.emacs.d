======================================================================
Subject: anything-M-x does not work

When I executed M-x anything-M-x, it does not work and
there is some messages in *Messages* Buffer.
I tried both compiling elisp and not compiling elisp.
I finished setup 'anthing' using M-x auto-install-batch anything.
Is it 'anything' bug or something wrong in my init.el?

# BEGIN OF *Messages* buffer
if: Symbol's function definition is void: make-composed-keymap
# END OF *Messages* buffer

# BEGIN OF init.el
 (add-to-list 'load-path "~/.emacs.d/elisp")
 (add-to-list 'load-path "~/.emacs.d/auto-install")

 (require 'auto-install)
 (setq auto-install-directory "~/.emacs.d/auto-install/")
 (auto-install-update-emacswiki-package-name t)
 (auto-install-compatibility-setup)

 (require 'anything)
 (require 'anything-config)
# END OF init.el

VERSION
Emacs  : GNU Emacs 23.2.1 (i386-mingw-nt5.1.2600) of 2010-05-08 on G41R2F1
anything-version "1.3.6" (LATEST)

======================================================================
Thierry Volpiatto  	
 More options Dec 17, 3:24 pm
Y N <tempest200...@gmail.com> writes: 
> When I executed M-x anything-M-x, it does not work and 
> there is some messages in *Messages* Buffer. 
> I tried both compiling elisp and not compiling elisp. 
> I finished setup 'anthing' using M-x auto-install-batch anything. 
> Is it 'anything' bug or something wrong in my init.el? 

You are using a deprecated, buggy and unsafe package. 
Please use the real thing at: 
http://repo.or.cz/w/anything-config.git 
(git clone git://repo.or.cz/anything-config.git) 
And then all you need is: 
(add-to-list 'load-path "/path/to/anything/directory") 
(require 'anything-config) 
BTW Installing package from Emacswiki is unsafe unless you read and 
understand all the code yourself. 
> # BEGIN OF *Messages* buffer 
> if: Symbol's function definition is void: make-composed-keymap 
> # END OF *Messages* buffer 
> # BEGIN OF init.el 
>  (add-to-list 'load-path "~/.emacs.d/elisp") 
>  (add-to-list 'load-path "~/.emacs.d/auto-install") 


NO. 
>  (require 'auto-install) 
>  (setq auto-install-directory "~/.emacs.d/auto-install/") 
>  (auto-install-update-emacswiki-package-name t) 
>  (auto-install-compatibility-setup) 

AFAIU this update your version to a deprecated and unsafe version. 
>  (require 'anything) 

NO 
>  (require 'anything-config) 

Yes 
> # END OF init.el 
> VERSION 
> Emacs  : GNU Emacs 23.2.1 (i386-mingw-nt5.1.2600) of 2010-05-08 on G41R2F1 
> anything-version "1.3.6" (LATEST) 


I doubt. 

======================================================================
This mail is generated by anything-send-bug-report and I added situation.

Describe bug below, using a precise recipe.

When I executed M-x ...

  Nothing happend, but there is some messages in *Messages* Buffer.
  I tried both compiling elisp and not compiling elisp.

# BEGIN OF *Messages* buffer
if: Symbol's function definition is void: make-composed-keymap
# END OF *Messages* buffer

# BEGIN OF *Backtrace* buffer
Debugger entered--Lisp error: (void-function make-composed-keymap)
  (make-composed-keymap must-match-map anything-map)
  (if must-match-map (make-composed-keymap must-match-map anything-map) anything-map)
  (let* ((minibuffer-completion-confirm must-match) (must-match-map ...) (anything-map ...) (src-hist ...) (src ...) (src-1 ...) (src-list ...) (anything-execute-action-at-once-if-one exec-when-only-one)) (or (anything :sources src-list :input initial-input :default default :preselect preselect :prompt prompt :resume ... :history ... :buffer buffer) (when ... ...) (unless ... default) (keyboard-quit)))
  (progn (fset (quote action-fn) (function* ...)) (when (eq must-match ...) (setq must-match ...)) (let* (... ... ... ... ... ... ... ...) (or ... ... ... ...)))
  (unwind-protect (progn (fset ... ...) (when ... ...) (let* ... ...)) (if --cl-letf-bound-- (fset ... --cl-letf-save--) (fmakunbound ...)))
  (let* ((--cl-letf-bound-- ...) (--cl-letf-save-- ...)) (unwind-protect (progn ... ... ...) (if --cl-letf-bound-- ... ...)))
  (letf ((... ...)) (when (eq must-match ...) (setq must-match ...)) (let* (... ... ... ... ... ... ... ...) (or ... ... ... ...)))
  (letf* ((... ...)) (when (eq must-match ...) (setq must-match ...)) (let* (... ... ... ... ... ... ... ...) (or ... ... ... ...)))
  (flet ((action-fn ... ...)) (when (eq must-match ...) (setq must-match ...)) (let* (... ... ... ... ... ... ... ...) (or ... ... ... ...)))
  (catch (quote --cl-block-anything-comp-read--) (when (get-buffer anything-action-buffer) (kill-buffer anything-action-buffer)) (flet (...) (when ... ...) (let* ... ...)))
  (cl-block-wrapper (catch (quote --cl-block-anything-comp-read--) (when ... ...) (flet ... ... ...)))
  (block anything-comp-read (when (get-buffer anything-action-buffer) (kill-buffer anything-action-buffer)) (flet (...) (when ... ...) (let* ... ...)))
  (let* ((test ...) (initial-input ...) (default ...) (preselect ...) (buffer ...) (must-match ...) (requires-pattern ...) (history ...) (input-history ...) (persistent-action ...) (persistent-help ...) (name ...) (candidates-in-buffer ...) (exec-when-only-one ...) (volatile ...) (sort ...) (fc-transformer ...) (marked-candidates ...) (alistp ...)) (let (...) (while --cl-keys-- ...)) (block anything-comp-read (when ... ...) (flet ... ... ...)))
  anything-comp-read("M-x " [str-key anything-c-source-bookmark-ssh-files&dirs object-add-to-list anchor ido-completion-buffer-full vc-sccs tree-widget-action pgg-pgp ido-auto-merge-work-directories-length make-mode cfengine eshell-io idlw-help erc-backend delphi wid-browse ido-completion-map info-title org-table-settings ido-pop-dir anything-c-source-bookmarks-ssh compilation-find-file anything-ff-kill-buffer-fname anything-M-x-transformer ido-minibuffer-setup-hook org-feed erc-truncate erc-sound imenu-eager-completion-buffer newsticker-headline-processing enable-match-plugin :button-face LOCAL Save\ list\ now zero-or-more obj-temp ido-tidy erc-speedbar ido-rotate ido-makealist temp-file-name anything-M-x-key-face gnus-article-signature ido-enter-dired anything-c-source-semantic esh-cmd ido-to-end ido-setup-hook erc-mode-line-and-header ido-record-work-file ...] :test commandp :requires-pattern 2 :name "Emacs Commands" :persistent-action pers-help :persistent-help "Describe this command" :history ("toggle-debug-on-error" "anything" "eval-buffer" "shell") :sort string-lessp :must-match t :candidates-in-buffer t :fc-transformer anything-M-x-transformer)
  (let* ((command ...) (sym-com ...)) (unless current-prefix-arg (setq current-prefix-arg anything-current-prefix-arg)) (setq this-command sym-com) (call-interactively sym-com) (setq extended-command-history (cons command ...)))
  (progn (fset (quote pers-help) (function* ...)) (let* (... ...) (unless current-prefix-arg ...) (setq this-command sym-com) (call-interactively sym-com) (setq extended-command-history ...)))
  (unwind-protect (progn (fset ... ...) (let* ... ... ... ... ...)) (if --cl-letf-bound-- (fset ... --cl-letf-save--) (fmakunbound ...)))
  (let* ((--cl-letf-bound-- ...) (--cl-letf-save-- ...)) (unwind-protect (progn ... ...) (if --cl-letf-bound-- ... ...)))
  (letf ((... ...)) (let* (... ...) (unless current-prefix-arg ...) (setq this-command sym-com) (call-interactively sym-com) (setq extended-command-history ...)))
  (letf* ((... ...)) (let* (... ...) (unless current-prefix-arg ...) (setq this-command sym-com) (call-interactively sym-com) (setq extended-command-history ...)))
  (flet ((pers-help ... ...)) (let* (... ...) (unless current-prefix-arg ...) (setq this-command sym-com) (call-interactively sym-com) (setq extended-command-history ...)))
  (let* (in-help help-cand special-display-buffer-names special-display-regexps anything-persistent-action-use-special-display (history ...)) (flet (...) (let* ... ... ... ... ...)))
  anything-M-x()
  call-interactively(anything-M-x nil nil)
# END OF *Backtrace* buffer

# BEGIN OF init.el
 (add-to-list 'load-path "~/.emacs.d/elisp")
 (add-to-list 'load-path "~/.emacs.d/auto-install")

 (require 'auto-install)
 (setq auto-install-directory "~/.emacs.d/auto-install/")
 (auto-install-update-emacswiki-package-name t)
 (auto-install-compatibility-setup)

 (require 'anything)
 (require 'anything-config)
# END OF init.el

How to send a bug report:
  1) Be sure to use the LATEST version of anything.el.
  2) Enable debugger. M-x toggle-debug-on-error or (setq debug-on-error t)
  3) Use Lisp version instead of compiled one: (load "anything.el")
  4) If you got an error, please paste *Backtrace* buffer.
  5) Type C-c C-c to send.



Emacs  : GNU Emacs 23.2.1 (i386-mingw-nt5.1.2600)
 of 2010-05-08 on G41R2F1
Package: anything.el

current state:
==============
(setq
 anything-M-x-input-history nil
 anything-action-buffer "*anything action*"
 anything-additional-attributes '(name header-name candidates action coerce type init delayed-init match candidate-transformer
				  filtered-candidate-transformer action-transformer pattern-transformer delayed volatile requires-pattern
				  persistent-action candidates-in-buffer search search-from-end get-line display-to-real real-to-display cleanup
				  candidate-number-limit accept-empty disable-shortcuts dummy multiline update mode-line header-line resume
				  grep-candidates default-directory before-jump-hook after-jump-hook adjust recenter target-file info-index index-nodes
				  candidates-file headline condition subexp persistent-help default-action)
 anything-additional-type-attributes nil
 anything-after-action-hook '(anything-c-ffap-line-goto-line)
 anything-after-initialize-hook '(anything-reset-marked-candidates anything-clear-visible-mark)
 anything-after-persistent-action-hook '(anything-match-line-update anything-c-ffap-line-goto-line anything-reset-yank-point)
 anything-after-update-hook '(anything-after-update-hook--outline anything-ff-maybe-mark-candidates anything-ff-auto-expand-to-home-or-root
			      anything-ff-update-when-only-one-matched anything-ff-retrieve-last-expanded anything-confirm-and-exit-hook)
 anything-allow-skipping-current-buffer t
 anything-argument-keys '(:sources :input :prompt :resume :preselect :buffer :keymap :default :history)
 anything-async-processes nil
 anything-attributes '(name header-name candidates action coerce type init delayed-init match candidate-transformer filtered-candidate-transformer
		       action-transformer pattern-transformer delayed volatile requires-pattern persistent-action candidates-in-buffer search
		       search-from-end get-line display-to-real real-to-display cleanup candidate-number-limit accept-empty disable-shortcuts dummy
		       multiline update mode-line header-line resume grep-candidates default-directory before-jump-hook after-jump-hook adjust recenter
		       target-file info-index index-nodes candidates-file headline condition subexp persistent-help default-action)
 anything-auto-install-buffer "*anything auto install*"
 anything-before-action-hook '((lambda nil (when anything-c-use-adaptative-sorting (anything-c-adaptive-store-selection)))
			       anything-ff-before-action-hook-fn)
 anything-before-initialize-hook '((lambda nil (when anything-c-use-adaptative-sorting (setq anything-c-adaptive-done nil))))
 anything-browse-url-default-browser-alist '(("/usr/bin/w3m" . w3m-browse-url) ("firefox" . browse-url-firefox)
					     ("chromium-browser" . ac-browse-url-chromium) ("uzbl-browser" . ac-browse-url-uzbl)
					     ("kfmclient" . browse-url-kde) ("gnome-moz-remote" . browse-url-gnome-moz) ("mozilla" . browse-url-mozilla)
					     ("galeon" . browse-url-galeon) ("netscape" . browse-url-netscape) ("xmosaic" . browse-url-mosaic)
					     ("xterm" . browse-url-text-xterm))
 anything-buffer "*anything*"
 anything-buffer-file-name "n:/tool/emacs.d-d20111215-anything/.emacs.d/init.el"
 anything-buffer-mode-line-string '("Buffer(s)"
				    "\\<anything-c-buffer-map>\\[anything-c-buffer-help]:Help, \\<anything-map>\\[anything-select-action]:Acts,\\[anything-exit-minibuffer]/\\[anything-select-2nd-action-or-end-of-line]/\\[anything-select-3rd-action]:NthAct,\\[anything-send-bug-report-from-anything]:BugReport." "String displayed in mode-line in `anything-c-source-buffers-list'")
 anything-buffers '("*anything for files*" "*anything commands*" "*anything*")
 anything-bug-report-salutation "Describe bug below, using a precise recipe.\n\nWhen I executed M-x ...\n\nHow to send a bug report:\n  1) Be sure to use the LATEST version of anything.el.\n  2) Enable debugger. M-x toggle-debug-on-error or (setq debug-on-error t)\n  3) Use Lisp version instead of compiled one: (load \"anything.el\")\n  4) If you got an error, please paste *Backtrace* buffer.\n  5) Type C-c C-c to send."
 anything-build-regexp-history nil
 anything-c-adaptive-done nil
 anything-c-adaptive-history nil
 anything-c-adaptive-history-file "~/.emacs.d/anything-c-adaptive-history"
 anything-c-adaptive-history-length 50
 anything-c-apt-all-packages nil
 anything-c-apt-input-history nil
 anything-c-apt-installed-packages nil
 anything-c-apt-query "emacs"
 anything-c-apt-search-command "apt-cache search '%s'"
 anything-c-apt-show-command "apt-cache show '%s'"
 anything-c-auto-document-data nil
 anything-c-bbdb-name nil
 anything-c-bookmarks-face1 'anything-ff-directory
 anything-c-bookmarks-face2 'anything-ff-file
 anything-c-bookmarks-face3 'anything-bookmarks-su-face
 anything-c-boring-buffer-regexp "\\(\\` \\)\\|\\*anything\\|\\*ac-mode\\| \\*Echo Area\\| \\*Minibuf"
 anything-c-boring-file-regexp "/\\(?:\\(?:\\.\\(?:git\\|hg\\|svn\\)\\|CVS\\|_darcs\\)\\)\\(?:/\\|$\\)\\|^\\.#\\|\\(?:\\(?:\\.\\(?:class\\|la\\|o\\)\\|~\\)\\)$"
 anything-c-browse-code-regexp-alist '((lisp-interaction-mode .
					"^ *(def\\(un\\|subst\\|macro\\|face\\|alias\\|advice\\|struct\\|type\\|theme\\|var\\|group\\|custom\\|const\\|method\\|class\\)")
				       (emacs-lisp-mode .
					"^ *(def\\(un\\|subst\\|macro\\|face\\|alias\\|advice\\|struct\\|type\\|theme\\|var\\|group\\|custom\\|const\\|method\\|class\\)")
				       (lisp-mode .
					"^ *(def\\(un\\|subst\\|macro\\|face\\|alias\\|advice\\|struct\\|type\\|theme\\|var\\|group\\|custom\\|const\\|method\\|class\\)")
				       (python-mode . "\\<def\\>\\|\\<class\\>"))
 anything-c-browse-code-regexp-lisp "^ *(def\\(un\\|subst\\|macro\\|face\\|alias\\|advice\\|struct\\|type\\|theme\\|var\\|group\\|custom\\|const\\|method\\|class\\)"
 anything-c-browse-code-regexp-python "\\<def\\>\\|\\<class\\>"
 anything-c-buffer-display-string-functions '(anything-c-buffer-display-string--compilation anything-c-buffer-display-string--shell
					      anything-c-buffer-display-string--eshell)
 anything-c-cache-gentoo nil
 anything-c-cache-world nil
 anything-c-cached-imenu-alist nil
 anything-c-cached-imenu-candidates nil
 anything-c-cached-imenu-tick nil
 anything-c-copy-async-prefered-emacs "emacs"
 anything-c-copy-files-async-log-file "/tmp/dired.log"
 anything-c-ctags-modes '(c-mode c++-mode awk-mode csharp-mode java-mode javascript-mode lua-mode makefile-mode pascal-mode perl-mode cperl-mode php-mode
			  python-mode scheme-mode sh-mode slang-mode sql-mode tcl-mode)
 anything-c-default-external-file-browser "nautilus"
 anything-c-default-zgrep-command "zgrep -niH -e %p %f"
 anything-c-eldoc-in-minibuffer-show-fn 'anything-c-show-info-in-mode-line
 anything-c-enable-eval-defun-hack t
 anything-c-etags-cache #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data ())
 anything-c-etags-mtime-alist nil
 anything-c-etags-search-regexp "^.+: .+ \\<%s"
 anything-c-etags-tag-file-dir nil
 anything-c-etags-tag-file-name "TAGS"
 anything-c-etags-tag-file-search-limit 10
 anything-c-etags-use-regexp-search nil
 anything-c-external-commands-list nil
 anything-c-external-programs-associations nil
 anything-c-ffap-line-location nil
 anything-c-file-cache-files nil
 anything-c-file-cache-initialized-p t
 anything-c-filelist-file-name nil
 anything-c-find-files-doc-header " (`C-l': Go to precedent level)"
 anything-c-firefox-bookmarks-alist nil
 anything-c-function-abbrev-regexp nil
 anything-c-gentoo-buffer "*anything-gentoo-output*"
 anything-c-gentoo-use-flags nil
 anything-c-google-suggest-default-browser-function nil
 anything-c-google-suggest-default-function 'anything-c-google-suggest-set-candidates
 anything-c-google-suggest-search-url "http://www.google.com/search?ie=utf-8&oe=utf-8&q="
 anything-c-google-suggest-url "http://google.com/complete/search?output=toolbar&q="
 anything-c-grep-debug-command-line nil
 anything-c-grep-default-command "grep -d skip %e -niH -e %p %f"
 anything-c-grep-default-function 'anything-c-grep-init
 anything-c-grep-default-recurse-command "grep -d recurse %e -niH -e %p %f"
 anything-c-grep-history nil
 anything-c-grep-max-length-history 100
 anything-c-grep-use-ioccur-style-keys t
 anything-c-home-url "http://www.google.fr"
 anything-c-imenu-delimiter " / "
 anything-c-imenu-index-filter nil
 anything-c-info-pages nil
 anything-c-kill-ring-max-lines-number nil
 anything-c-locate-command nil
 anything-c-man-pages nil
 anything-c-org-keywords-info-location '(("#+TITLE:" . "(org)Export options") ("#+AUTHOR:" . "(org)Export options") ("#+DATE:" . "(org)Export options")
					 ("#+EMAIL:" . "(org)Export options") ("#+DESCRIPTION:" . "(org)Export options")
					 ("#+KEYWORDS:" . "(org)Export options") ("#+LANGUAGE:" . "(org)Export options")
					 ("#+TEXT:" . "(org)Export options") ("#+TEXT:" . "(org)Export options") ("#+OPTIONS:" . "(org)Export options")
					 ("#+BIND:" . "(org)Export options") ("#+LINK_UP:" . "(org)Export options")
					 ("#+LINK_HOME:" . "(org)Export options") ("#+LATEX_HEADER:" . "(org)Export options")
					 ("#+EXPORT_SELECT_TAGS:" . "(org)Export options") ("#+EXPORT_EXCLUDE_TAGS:" . "(org)Export options")
					 ("#+INFOJS_OPT" . "(org)Javascript support") ("#+BEGIN_HTML" . "(org)Quoting HTML tags")
					 ("#+BEGIN_LaTeX" . "(org)Quoting LaTeX code") ("#+ORGTBL" . "(org)Radio tables")
					 ("#+HTML:" . "(org)Quoting HTML tags") ("#+LaTeX:" . "(org)Quoting LaTeX code")
					 ("#+BEGIN:" . "(org)Dynamic blocks") ("#+BEGIN_EXAMPLE" . "(org)Literal examples")
					 ("#+BEGIN_QUOTE" . "(org)Paragraphs") ("#+BEGIN_VERSE" . "(org)Paragraphs")
					 ("#+BEGIN_SRC" . "(org)Literal examples") ("#+CAPTION" . "(org)Tables in HTML export")
					 ("#+LABEL" . "(org)Tables in LaTeX export") ("#+ATTR_HTML" . "(org)Links")
					 ("#+ATTR_LaTeX" . "(org)Images in LaTeX export"))
 anything-c-pdfgrep-debug-command-line nil
 anything-c-pdfgrep-default-command "pdfgrep --color never -niH %s %s"
 anything-c-pdfgrep-default-function 'anything-c-pdfgrep-init
 anything-c-pdfgrep-default-read-command "xpdf '%f' %p"
 anything-c-rzgrep-cache #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data ())
 anything-c-show-completion-overlay nil
 anything-c-show-info-in-mode-line-delay 12
 anything-c-simple-call-tree-function-index 0
 anything-c-simple-call-tree-related-functions nil
 anything-c-simple-call-tree-tick nil
 anything-c-top-command "COLUMNS=%s top -b -n 1"
 anything-c-turn-on-show-completion t
 anything-c-ucs-max-len 0
 anything-c-ucs-mode-line-string "\\<anything-c-ucs-map>\\[anything-c-ucs-help]:Help, \\<anything-map>\\[anything-select-action]:Acts,\\[anything-exit-minibuffer]/\\[anything-select-2nd-action-or-end-of-line]/\\[anything-select-3rd-action]:NthAct."
 anything-c-use-adaptative-sorting nil
 anything-c-w3m-bookmarks-alist nil
 anything-c-xfonts-cache nil
 anything-c-xrandr-output "VGA"
 anything-c-xrandr-screen "0"
 anything-c-yahoo-suggest-search-url "http://search.yahoo.com/search?&ei=UTF-8&fr&h=c&p="
 anything-c-yahoo-suggest-url "http://search.yahooapis.com/WebSearchService/V1/relatedSuggestion?appid=Generic&query="
 anything-c-yaoddmuse-cache-file "~/.emacs.d/yaoddmuse-cache.el"
 anything-c-yaoddmuse-ew-cache nil
 anything-c-zgrep-recurse-flag nil
 anything-candidate-number-limit 50
 anything-candidate-separator "--------------------"
 anything-check-minibuffer-input-timer nil
 anything-cleanup-hook '(anything-match-line-cleanup anything-reset-yank-point anything-ff-save-history)
 anything-command-map-prefix-key "<f5> a"
 anything-compile-source-functions '(anything-compile-source--persistent-help anything-compile-source--anything-headline
				     anything-compile-source--candidates-file anything-compile-source--info-index anything-compile-source--grep-candidates
				     anything-compile-source--type anything-compile-source--dummy anything-compile-source--disable-shortcuts
				     anything-compile-source--candidates-in-buffer anything-compile-source--match-plugin
				     anything-compile-source--type-customize anything-compile-source--default-action)
 anything-compile-source-functions-default '(anything-compile-source--type anything-compile-source--dummy anything-compile-source--disable-shortcuts
					     anything-compile-source--candidates-in-buffer)
 anything-compiled-sources '(((match anything-exact-match anything-mp-3p-match anything-mp-3-match)
			      (search anything-exact-search anything-mp-3p-search anything-mp-3-search) (name . "File/Lineno at point")
			      (init lambda nil (require (quote ffap))) (candidates . anything-c-ffap-line-candidates) (type . file)
			      (header-line . anything-persistent-help-string)
			      (action ("Find file" . anything-find-many-files) ("Find file as root" . anything-find-file-as-root)
			       ("Find file other window" . find-file-other-window) ("Find file other frame" . find-file-other-frame)
			       ("Open dired in file's directory" . anything-c-open-dired) ("Grep File(s) `C-u recurse'" . anything-find-files-grep)
			       ("Zgrep File(s) `C-u Recurse'" . anything-ff-zgrep) ("Pdfgrep File(s)" . anything-ff-pdfgrep)
			       ("Checksum File" . anything-ff-checksum) ("Ediff File" . anything-find-files-ediff-files)
			       ("Ediff Merge File" . anything-find-files-ediff-merge-files) ("View file" . view-file) ("Insert file" . insert-file)
			       ("Delete file(s)" . anything-delete-marked-files)
			       ("Open file externally (C-u to choose)" . anything-c-open-file-externally)
			       ("Open file with default tool" . anything-c-open-file-with-default-tool) ("Find file in hex dump" . hexl-find-file))
			      (persistent-help . "Show this file")
			      (action-transformer anything-c-transform-file-load-el anything-c-transform-file-browse-url)
			      (candidate-transformer anything-c-w32-pathname-transformer anything-c-skip-current-file anything-c-skip-boring-files
			       anything-c-shorten-home-path)
			      )
			     ((match anything-exact-match anything-mp-3p-match anything-mp-3-match)
			      (search anything-exact-search anything-mp-3p-search anything-mp-3-search) (name . "File at point")
			      (init lambda nil (require (quote ffap)))
			      (candidates lambda nil (anything-aif (with-anything-current-buffer (ffap-guesser)) (list it))) (type . file)
			      (header-line . anything-persistent-help-string)
			      (action ("Find file" . anything-find-many-files) ("Find file as root" . anything-find-file-as-root)
			       ("Find file other window" . find-file-other-window) ("Find file other frame" . find-file-other-frame)
			       ("Open dired in file's directory" . anything-c-open-dired) ("Grep File(s) `C-u recurse'" . anything-find-files-grep)
			       ("Zgrep File(s) `C-u Recurse'" . anything-ff-zgrep) ("Pdfgrep File(s)" . anything-ff-pdfgrep)
			       ("Checksum File" . anything-ff-checksum) ("Ediff File" . anything-find-files-ediff-files)
			       ("Ediff Merge File" . anything-find-files-ediff-merge-files) ("View file" . view-file) ("Insert file" . insert-file)
			       ("Delete file(s)" . anything-delete-marked-files)
			       ("Open file externally (C-u to choose)" . anything-c-open-file-externally)
			       ("Open file with default tool" . anything-c-open-file-with-default-tool) ("Find file in hex dump" . hexl-find-file))
			      (persistent-help . "Show this file")
			      (action-transformer anything-c-transform-file-load-el anything-c-transform-file-browse-url)
			      (candidate-transformer anything-c-w32-pathname-transformer anything-c-skip-current-file anything-c-skip-boring-files
			       anything-c-shorten-home-path)
			      )
			     ((match anything-exact-match anything-mp-3p-match anything-mp-3-match anything-c-buffer-match-major-mode)
			      (search anything-exact-search anything-mp-3p-search anything-mp-3-search) (name . "Buffers")
			      (candidates . anything-c-buffer-list) (type . buffer) (match anything-c-buffer-match-major-mode)
			      (candidate-transformer anything-c-skip-boring-buffers anything-c-highlight-buffers)
			      (persistent-action . anything-c-buffers-list-persistent-action) (volatile) (mode-line . anything-buffer-mode-line-string)
			      (persistent-help . "Show this buffer / C-u \\[anything-execute-persistent-action]: Kill this buffer")
			      (header-line . anything-persistent-help-string)
			      (action ("Switch to buffer" . anything-c-switch-to-buffer) ("Switch to buffer other window" . switch-to-buffer-other-window)
			       ("Switch to buffer other frame" . switch-to-buffer-other-frame)
			       ("Query replace regexp" . anything-c-buffer-query-replace-regexp) ("Query replace" . anything-c-buffer-query-replace)
			       ("View buffer" . view-buffer) ("Display buffer" . display-buffer)
			       ("Grep buffers (C-u grep all buffers)" . anything-c-grep-buffers) ("Revert buffer(s)" . anything-revert-marked-buffers)
			       ("Insert buffer" . insert-buffer) ("Kill buffer(s)" . anything-kill-marked-buffers)
			       ("Diff with file" . diff-buffer-with-file) ("Ediff Marked buffers" . anything-ediff-marked-buffers)
			       ("Ediff Merge marked buffers" lambda (candidate) (anything-ediff-marked-buffers candidate t)))
			      (persistent-help . "Show this buffer")
			      (candidate-transformer anything-c-skip-current-buffer anything-c-skip-boring-buffers
			       anything-c-transform-buffer-display-string)
			      )
			     ((match anything-exact-match anything-mp-3p-match anything-mp-3-match anything-c-match-on-basename)
			      (search anything-exact-search anything-mp-3p-search anything-mp-3-search)
			      (init (lambda nil (require (quote recentf)) (or recentf-mode (recentf-mode 1))) anything-save-enable-shortcuts)
			      (resume anything-save-enable-shortcuts)
			      (cleanup (lambda nil (setq anything-enable-shortcuts anything-orig-enable-shortcuts))) (name . "Recentf")
			      (init lambda nil (require (quote recentf)) (or recentf-mode (recentf-mode 1))) (disable-shortcuts)
			      (candidates . recentf-list) (match anything-c-match-on-basename) (type . file)
			      (header-line . anything-persistent-help-string)
			      (action ("Find file" . anything-find-many-files) ("Find file as root" . anything-find-file-as-root)
			       ("Find file other window" . find-file-other-window) ("Find file other frame" . find-file-other-frame)
			       ("Open dired in file's directory" . anything-c-open-dired) ("Grep File(s) `C-u recurse'" . anything-find-files-grep)
			       ("Zgrep File(s) `C-u Recurse'" . anything-ff-zgrep) ("Pdfgrep File(s)" . anything-ff-pdfgrep)
			       ("Checksum File" . anything-ff-checksum) ("Ediff File" . anything-find-files-ediff-files)
			       ("Ediff Merge File" . anything-find-files-ediff-merge-files) ("View file" . view-file) ("Insert file" . insert-file)
			       ("Delete file(s)" . anything-delete-marked-files)
			       ("Open file externally (C-u to choose)" . anything-c-open-file-externally)
			       ("Open file with default tool" . anything-c-open-file-with-default-tool) ("Find file in hex dump" . hexl-find-file))
			      (persistent-help . "Show this file")
			      (action-transformer anything-c-transform-file-load-el anything-c-transform-file-browse-url)
			      (candidate-transformer anything-c-w32-pathname-transformer anything-c-skip-current-file anything-c-skip-boring-files
			       anything-c-shorten-home-path)
			      )
			     ((match anything-exact-match anything-mp-3p-match anything-mp-3-match)
			      (search anything-exact-search anything-mp-3p-search anything-mp-3-search) (name . "Bookmarks")
			      (init lambda nil (require (quote bookmark))) (candidates . bookmark-all-names) (type . bookmark)
			      (header-line . anything-persistent-help-string) (coerce . anything-bookmark-get-bookmark-from-name)
			      (action
			       ("Jump to bookmark" lambda (bookmark) (let ((current-prefix-arg anything-current-prefix-arg)) (bookmark-jump bookmark))
				(anything-update))
			       ("Jump to BM other window" lambda (bookmark) (bookmark-jump-other-window bookmark) (anything-update))
			       ("Bookmark edit annotation" . bookmark-edit-annotation) ("Bookmark show annotation" . bookmark-show-annotation)
			       ("Delete bookmark(s)" . anything-delete-marked-bookmarks) ("Rename bookmark" . bookmark-rename)
			       ("Relocate bookmark" . bookmark-relocate))
			      )
			     ((match anything-exact-match anything-mp-3p-match anything-mp-3-match anything-c-match-on-basename)
			      (search anything-exact-search anything-mp-3p-search anything-mp-3-search) (name . "File Cache")
			      (init lambda nil (require (quote filecache) nil t)
			       (unless anything-c-file-cache-initialized-p
				(setq anything-c-file-cache-files
				 (loop for item in file-cache-alist append
				  (destructuring-bind (base &rest dirs) item (loop for dir in dirs collect (concat dir base))))
				 )
				(defadvice file-cache-add-file (after file-cache-list activate)
				 (add-to-list (quote anything-c-file-cache-files) (expand-file-name file)))
				(setq anything-c-file-cache-initialized-p t))
			       )
			      (candidates . anything-c-file-cache-files) (match anything-c-match-on-basename) (type . file)
			      (header-line . anything-persistent-help-string)
			      (action ("Find file" . anything-find-many-files) ("Find file as root" . anything-find-file-as-root)
			       ("Find file other window" . find-file-other-window) ("Find file other frame" . find-file-other-frame)
			       ("Open dired in file's directory" . anything-c-open-dired) ("Grep File(s) `C-u recurse'" . anything-find-files-grep)
			       ("Zgrep File(s) `C-u Recurse'" . anything-ff-zgrep) ("Pdfgrep File(s)" . anything-ff-pdfgrep)
			       ("Checksum File" . anything-ff-checksum) ("Ediff File" . anything-find-files-ediff-files)
			       ("Ediff Merge File" . anything-find-files-ediff-merge-files) ("View file" . view-file) ("Insert file" . insert-file)
			       ("Delete file(s)" . anything-delete-marked-files)
			       ("Open file externally (C-u to choose)" . anything-c-open-file-externally)
			       ("Open file with default tool" . anything-c-open-file-with-default-tool) ("Find file in hex dump" . hexl-find-file))
			      (persistent-help . "Show this file")
			      (action-transformer anything-c-transform-file-load-el anything-c-transform-file-browse-url)
			      (candidate-transformer anything-c-w32-pathname-transformer anything-c-skip-current-file anything-c-skip-boring-files
			       anything-c-shorten-home-path)
			      )
			     ((match anything-exact-match anything-mp-3p-match anything-mp-3-match)
			      (search anything-exact-search anything-mp-3p-search anything-mp-3-search) (name . "Files from Current Directory")
			      (candidates lambda nil (with-anything-current-buffer (directory-files (anything-c-current-directory) t)))
			      (candidate-transformer anything-c-highlight-files) (type . file) (header-line . anything-persistent-help-string)
			      (action ("Find file" . anything-find-many-files) ("Find file as root" . anything-find-file-as-root)
			       ("Find file other window" . find-file-other-window) ("Find file other frame" . find-file-other-frame)
			       ("Open dired in file's directory" . anything-c-open-dired) ("Grep File(s) `C-u recurse'" . anything-find-files-grep)
			       ("Zgrep File(s) `C-u Recurse'" . anything-ff-zgrep) ("Pdfgrep File(s)" . anything-ff-pdfgrep)
			       ("Checksum File" . anything-ff-checksum) ("Ediff File" . anything-find-files-ediff-files)
			       ("Ediff Merge File" . anything-find-files-ediff-merge-files) ("View file" . view-file) ("Insert file" . insert-file)
			       ("Delete file(s)" . anything-delete-marked-files)
			       ("Open file externally (C-u to choose)" . anything-c-open-file-externally)
			       ("Open file with default tool" . anything-c-open-file-with-default-tool) ("Find file in hex dump" . hexl-find-file))
			      (persistent-help . "Show this file")
			      (action-transformer anything-c-transform-file-load-el anything-c-transform-file-browse-url)
			      (candidate-transformer anything-c-w32-pathname-transformer anything-c-skip-current-file anything-c-skip-boring-files
			       anything-c-shorten-home-path)
			      )
			     ((match anything-exact-match anything-mp-3p-match anything-mp-3-match)
			      (search anything-exact-search anything-mp-3p-search anything-mp-3-search) (name . "Locate")
			      (candidates . anything-c-locate-init) (type . file) (requires-pattern . 3) (candidate-number-limit . 9999)
			      (mode-line . anything-generic-file-mode-line-string) (delayed) (header-line . anything-persistent-help-string)
			      (action ("Find file" . anything-find-many-files) ("Find file as root" . anything-find-file-as-root)
			       ("Find file other window" . find-file-other-window) ("Find file other frame" . find-file-other-frame)
			       ("Open dired in file's directory" . anything-c-open-dired) ("Grep File(s) `C-u recurse'" . anything-find-files-grep)
			       ("Zgrep File(s) `C-u Recurse'" . anything-ff-zgrep) ("Pdfgrep File(s)" . anything-ff-pdfgrep)
			       ("Checksum File" . anything-ff-checksum) ("Ediff File" . anything-find-files-ediff-files)
			       ("Ediff Merge File" . anything-find-files-ediff-merge-files) ("View file" . view-file) ("Insert file" . insert-file)
			       ("Delete file(s)" . anything-delete-marked-files)
			       ("Open file externally (C-u to choose)" . anything-c-open-file-externally)
			       ("Open file with default tool" . anything-c-open-file-with-default-tool) ("Find file in hex dump" . hexl-find-file))
			      (persistent-help . "Show this file")
			      (action-transformer anything-c-transform-file-load-el anything-c-transform-file-browse-url)
			      (candidate-transformer anything-c-w32-pathname-transformer anything-c-skip-current-file anything-c-skip-boring-files
			       anything-c-shorten-home-path)
			      )
			     )
 anything-completing-read-handlers-alist '((describe-function . anything-completing-read-symbols) (describe-variable . anything-completing-read-symbols)
					   (debug-on-entry . anything-completing-read-symbols) (find-function . anything-completing-read-symbols)
					   (trace-function . anything-completing-read-symbols)
					   (trace-function-background . anything-completing-read-symbols)
					   (find-tag . anything-completing-read-with-cands-in-buffer) (ffap-alternate-file))
 anything-completion-mode nil
 anything-completion-mode-quit-message "Anything completion disabled"
 anything-completion-mode-start-message "Anything completion enabled"
 anything-completion-mode-string " AC"
 anything-create--actions-private nil
 anything-current-buffer #<buffer init.el>
 anything-current-position '(355 . 1)
 anything-current-prefix-arg nil
 anything-debug nil
 anything-debug-forms nil
 anything-debug-variables nil
 anything-default-match-functions '((lambda (candidate) (string-match anything-pattern candidate)))
 anything-delayed-init-executed nil
 anything-digit-shortcut-count 0
 anything-dired-mode "Enable anything completion in Dired functions.\nBindings affected are C, R, S, H.\nThis is deprecated for Emacs24+ users, use `ac-mode' instead."
 anything-display-function 'anything-default-display-buffer
 anything-display-source-at-screen-top t
 anything-ec-target ""
 anything-eldoc-active-minibuffers-list nil
 anything-enable-digit-shortcuts nil
 anything-enable-shortcuts nil
 anything-eshell-command-on-file-input-history nil
 anything-etags-mode-line-string "\\<anything-c-etags-map>\\[anything-etags-help]:Help,\\<anything-map>\\[anything-select-action]:Acts,\\[anything-exit-minibuffer]/\\[anything-select-2nd-action-or-end-of-line]/\\[anything-select-3rd-action]:NthAct,\\[anything-send-bug-report-from-anything]:BugReport."
 anything-eval-expression-input-history nil
 anything-exact-pattern-real nil
 anything-exact-pattern-str nil
 anything-execute-action-at-once-if-one nil
 anything-exit-status 1
 anything-external-command-history nil
 anything-ff-auto-update-flag nil
 anything-ff-auto-update-initial-value t
 anything-ff-avfs-directory nil
 anything-ff-cand-to-mark nil
 anything-ff-default-directory nil
 anything-ff-default-kbsize 1024.0
 anything-ff-exif-data-program "exiftran"
 anything-ff-exif-data-program-args "-d"
 anything-ff-file-compressed-list '("gz" "bz2" "zip" "7z")
 anything-ff-history nil
 anything-ff-history-max-length 100
 anything-ff-last-expanded nil
 anything-ff-mode-line-string "\\<anything-find-files-map>\\[anything-ff-help]:Help, \\[anything-send-bug-report-from-anything]:BugReport, \\<anything-map>\\[anything-select-action]:Acts, \\[anything-exit-minibuffer]/\\[anything-select-2nd-action-or-end-of-line]/\\[anything-select-3rd-action]:NthAct"
 anything-ff-newfile-prompt-p t
 anything-ff-printer-list nil
 anything-ff-quick-delete-dont-prompt-for-deletion nil
 anything-ff-signal-error-on-dot-files t
 anything-ff-smart-completion t
 anything-ff-tramp-not-fancy t
 anything-ff-transformer-show-only-basename nil
 anything-file-completion-sources '("Find Files" "Read File Name" "Read File Name History" "Copy Files" "Rename Files" "Symlink Files" "Hardlink Files"
				    "Write File" "Insert File")
 anything-firefox-bookmark-url-regexp "\\(https\\|http\\|ftp\\|about\\|file\\)://[^ \"]*"
 anything-firefox-bookmarks-regexp ">\\([^><]+.[^</a>]\\)"
 anything-follow-mode nil
 anything-for-files-prefered-list '(anything-c-source-ffap-line anything-c-source-ffap-guesser anything-c-source-buffers-list anything-c-source-recentf
				    anything-c-source-bookmarks anything-c-source-file-cache anything-c-source-files-in-current-dir+
				    anything-c-source-locate)
 anything-generic-file-mode-line-string "\\<anything-generic-files-map>\\[anything-generic-file-help]:Help, \\<anything-map>\\[anything-select-action]:Acts,\\[anything-exit-minibuffer]/\\[anything-select-2nd-action-or-end-of-line]/\\[anything-select-3rd-action]:NthAct,\\[anything-send-bug-report-from-anything]:BugReport."
 anything-ggs-max-length-num-flag 0
 anything-ggs-max-length-real-flag 0
 anything-google-suggest-use-curl-p nil
 anything-grep-candidates-fast-directory-regexp nil
 anything-grep-mode-line-string "\\<anything-c-grep-map>\\[anything-grep-help]:Help,\\<anything-map>\\[anything-select-action]:Acts,\\[anything-exit-minibuffer]/\\[anything-select-2nd-action-or-end-of-line]/\\[anything-select-3rd-action]:NthAct,\\[anything-send-bug-report-from-anything]:BugReport."
 anything-idle-delay 0.3
 anything-in-persistent-action nil
 anything-input ""
 anything-input-idle-delay 0.3
 anything-input-local ""
 anything-issued-errors nil
 anything-kill-ring-threshold 10
 anything-last-buffer "*anything for files*"
 anything-last-frame-or-window-configuration #<window-configuration>
 anything-last-log-file nil
 anything-last-sources '(anything-c-source-ffap-line anything-c-source-ffap-guesser anything-c-source-buffers-list anything-c-source-recentf
			 anything-c-source-bookmarks anything-c-source-file-cache anything-c-source-files-in-current-dir+ anything-c-source-locate)
 anything-last-sources-local '(anything-c-source-ffap-line anything-c-source-ffap-guesser anything-c-source-buffers-list anything-c-source-recentf
			       anything-c-source-bookmarks anything-c-source-file-cache anything-c-source-files-in-current-dir+ anything-c-source-locate)
 anything-let-variables nil
 anything-lisp-completion-counter 0
 anything-lisp-completion-or-indent-delay 0.6
 anything-locate-db-file-regexp "m?locate.db$"
 anything-maintainer-mail-address "emacs-anything@googlegroups.com"
 anything-mark-ring-cache nil
 anything-marked-candidates nil
 anything-match-line-overlay nil
 anything-minibuffer-confirm-state nil
 anything-mode-line-string '("Buffer(s)"
			     "\\<anything-c-buffer-map>\\[anything-c-buffer-help]:Help, \\<anything-map>\\[anything-select-action]:Acts,\\[anything-exit-minibuffer]/\\[anything-select-2nd-action-or-end-of-line]/\\[anything-select-3rd-action]:NthAct,\\[anything-send-bug-report-from-anything]:BugReport." "String displayed in mode-line in `anything-c-source-buffers-list'")
 anything-mode-line-string-real "C-c ?:Help, TAB:Acts,RET/C-e/C-j:NthAct,C-c C-x C-b:BugReport."
 anything-move-selection-after-hook nil
 anything-move-selection-before-hook nil
 anything-mp-1-pattern-real nil
 anything-mp-1-pattern-str nil
 anything-mp-2-pattern-real nil
 anything-mp-2-pattern-str nil
 anything-mp-3-pattern-list nil
 anything-mp-3-pattern-str " "
 anything-mp-default-match-functions '(anything-exact-match anything-mp-3p-match anything-mp-3-match)
 anything-mp-default-search-backward-functions '(anything-exact-search-backward anything-mp-3p-search-backward anything-mp-3-search-backward)
 anything-mp-default-search-functions '(anything-exact-search anything-mp-3p-search anything-mp-3-search)
 anything-mp-highlight-delay 0.7
 anything-mp-highlight-threshold 2
 anything-mp-initial-highlight-delay nil
 anything-mp-match-source-name t
 anything-mp-space-regexp "[\\ ] "
 anything-no-dump-variables '(anything-candidate-buffer-alist anything-digit-overlays anything-help-message anything-candidate-cache)
 anything-once-called-functions '(((lambda nil (setq anything-orig-enable-shortcuts anything-enable-shortcuts anything-enable-shortcuts nil))))
 anything-orig-enable-shortcuts nil
 anything-outline-goto-near-line-flag t
 anything-outline-using nil
 anything-pattern ""
 anything-pdfgrep-mode-line-string "\\<anything-c-pdfgrep-map>\\[anything-pdfgrep-help]:Help,\\<anything-map>\\[anything-select-action]:Acts,\\[anything-exit-minibuffer]/\\[anything-select-2nd-action-or-end-of-line]/\\[anything-select-3rd-action]:NthAct,\\[anything-send-bug-report-from-anything]:BugReport."
 anything-persistent-action-display-window nil
 anything-persistent-action-use-special-display nil
 anything-prefix-pattern-real nil
 anything-prefix-pattern-str nil
 anything-process-delayed-sources-timer nil
 anything-quick-update nil
 anything-quit nil
 anything-quit-if-no-candidate nil
 anything-raise-command nil
 anything-read-file-name-mode-line-string "\\<anything-c-read-file-map>\\[anything-read-file-name-help]:Help, \\<anything-map>\\[anything-select-action]:Acts,\\[anything-exit-minibuffer]/\\[anything-select-2nd-action-or-end-of-line]/\\[anything-select-3rd-action]:NthAct"
 anything-reading-pattern nil
 anything-restored-variables '(anything-candidate-number-limit anything-source-filter anything-source-in-each-line-flag anything-map anything-sources)
 anything-samewindow nil
 anything-save-configuration-functions '(set-window-configuration . current-window-configuration)
 anything-saved-action nil
 anything-saved-current-source nil
 anything-saved-selection nil
 anything-scroll-amount nil
 anything-select-action-hook '((lambda nil (when anything-c-use-adaptative-sorting (anything-c-adaptive-store-selection))))
 anything-selection-overlay #<overlay from 9 to 16 in *anything for files*>
 anything-selection-point 9
 anything-semantic-candidates nil
 anything-shortcut-keys nil
 anything-shortcut-keys-alist '((alphabet . "asdfghjklzxcvbnmqwertyuiop") (prefix . "asdfghjklzxcvbnmqwertyuiop1234567890") (t . "123456789"))
 anything-source-filter nil
 anything-source-in-each-line-flag nil
 anything-source-name nil
 anything-source-select-buffer "*anything source select*"
 anything-sources '(anything-c-source-buffers-list anything-c-source-recentf anything-c-source-files-in-current-dir+)
 anything-split-window-state 'vertical
 anything-su-or-sudo "su"
 anything-surfraw-default-browser-function nil
 anything-surfraw-engines-history nil
 anything-surfraw-input-history nil
 anything-test-candidate-list nil
 anything-test-mode nil
 anything-tramp-verbose 0
 anything-type-attributes '((timer (real-to-display . anything-c-timer-real-to-display)
			     (action ("Cancel Timer" . cancel-timer) ("Describe Function" lambda (tm) (describe-function (timer--function tm)))
			      ("Find Function" lambda (tm) (find-function (timer--function tm))))
			     (persistent-action lambda (tm) (describe-function (timer--function tm))) (persistent-help . "Describe Function"))
			    (file-line (filtered-candidate-transformer anything-c-filtered-candidate-transformer-file-line) (multiline)
			     (action ("Go to" . anything-c-action-file-line-goto)))
			    (line (display-to-real . anything-c-display-to-real-line) (action ("Go to Line" . anything-c-action-line-goto)))
			    (bookmark (coerce . anything-bookmark-get-bookmark-from-name)
			     (action
			      ("Jump to bookmark" lambda (bookmark) (let ((current-prefix-arg anything-current-prefix-arg)) (bookmark-jump bookmark))
			       (anything-update))
			      ("Jump to BM other window" lambda (bookmark) (bookmark-jump-other-window bookmark) (anything-update))
			      ("Bookmark edit annotation" . bookmark-edit-annotation) ("Bookmark show annotation" . bookmark-show-annotation)
			      ("Delete bookmark(s)" . anything-delete-marked-bookmarks) ("Rename bookmark" . bookmark-rename)
			      ("Relocate bookmark" . bookmark-relocate))
			     )
			    (sexp (action ("Eval s-expression" lambda (c) (eval (read c))) ("Add s-expression to kill ring" . kill-new))
			     (action-transformer anything-c-transform-sexp-eval-command-sexp))
			    (variable
			     (action ("Describe variable" . describe-variable) ("Add variable to kill ring" . anything-c-kill-new)
			      ("Go to variable's definition" . find-variable) ("Set variable" . anything-c-set-variable))
			     (coerce . anything-c-symbolify))
			    (function
			     (action ("Describe command" . describe-function) ("Add command to kill ring" . anything-c-kill-new)
			      ("Go to command's definition" . find-function) ("Debug on entry" . debug-on-entry)
			      ("Cancel debug on entry" . cancel-debug-on-entry) ("Trace function" . trace-function)
			      ("Trace function (background)" . trace-function-background) ("Untrace function" . untrace-function))
			     (action-transformer anything-c-transform-function-call-interactively)
			     (candidate-transformer anything-c-mark-interactive-functions) (coerce . anything-c-symbolify))
			    (command
			     (action ("Call interactively" . anything-c-call-interactively) ("Describe command" . describe-function)
			      ("Add command to kill ring" . anything-c-kill-new) ("Go to command's definition" . find-function)
			      ("Debug on entry" . debug-on-entry) ("Cancel debug on entry" . cancel-debug-on-entry) ("Trace function" . trace-function)
			      ("Trace function (background)" . trace-function-background) ("Untrace function" . untrace-function))
			     (coerce . anything-c-symbolify) (persistent-action . describe-function))
			    (file
			     (action ("Find file" . anything-find-many-files) ("Find file as root" . anything-find-file-as-root)
			      ("Find file other window" . find-file-other-window) ("Find file other frame" . find-file-other-frame)
			      ("Open dired in file's directory" . anything-c-open-dired) ("Grep File(s) `C-u recurse'" . anything-find-files-grep)
			      ("Zgrep File(s) `C-u Recurse'" . anything-ff-zgrep) ("Pdfgrep File(s)" . anything-ff-pdfgrep)
			      ("Checksum File" . anything-ff-checksum) ("Ediff File" . anything-find-files-ediff-files)
			      ("Ediff Merge File" . anything-find-files-ediff-merge-files) ("View file" . view-file) ("Insert file" . insert-file)
			      ("Delete file(s)" . anything-delete-marked-files) ("Open file externally (C-u to choose)" . anything-c-open-file-externally)
			      ("Open file with default tool" . anything-c-open-file-with-default-tool) ("Find file in hex dump" . hexl-find-file))
			     (persistent-help . "Show this file")
			     (action-transformer anything-c-transform-file-load-el anything-c-transform-file-browse-url)
			     (candidate-transformer anything-c-w32-pathname-transformer anything-c-skip-current-file anything-c-skip-boring-files
			      anything-c-shorten-home-path)
			     )
			    (buffer
			     (action ("Switch to buffer" . anything-c-switch-to-buffer) ("Switch to buffer other window" . switch-to-buffer-other-window)
			      ("Switch to buffer other frame" . switch-to-buffer-other-frame)
			      ("Query replace regexp" . anything-c-buffer-query-replace-regexp) ("Query replace" . anything-c-buffer-query-replace)
			      ("View buffer" . view-buffer) ("Display buffer" . display-buffer)
			      ("Grep buffers (C-u grep all buffers)" . anything-c-grep-buffers) ("Revert buffer(s)" . anything-revert-marked-buffers)
			      ("Insert buffer" . insert-buffer) ("Kill buffer(s)" . anything-kill-marked-buffers)
			      ("Diff with file" . diff-buffer-with-file) ("Ediff Marked buffers" . anything-ediff-marked-buffers)
			      ("Ediff Merge marked buffers" lambda (candidate) (anything-ediff-marked-buffers candidate t)))
			     (persistent-help . "Show this buffer")
			     (candidate-transformer anything-c-skip-current-buffer anything-c-skip-boring-buffers
			      anything-c-transform-buffer-display-string)
			     )
			    )
 anything-types '(buffer file command function variable sexp bookmark line file-line timer)
 anything-update-hook '(anything-mp-highlight-match anything-revive-visible-mark)
 anything-use-multiple-patterns t
 anything-version "1.3.6"
 anything-visible-mark-overlays nil
 anything-w3m-bookmark-url-regexp "\\(https\\|http\\|ftp\\|file\\)://[^>]*"
 anything-w3m-bookmarks-regexp ">\\([^><]+.[^</a>]\\)"
 anything-yank-point nil
 anything-yaoddmuse-use-cache-file nil
 )
Subject: bugreport anything (anything-M-x)

This mail is generated by anything-send-bug-report and I added situation.

Describe bug below, using a precise recipe.

When I executed M-x ...

  Nothing happend, but there is some messages in *Messages* Buffer.
  I tried both compiling elisp and not compiling elisp.

# BEGIN OF *Messages* buffer
if: Symbol's function definition is void: make-composed-keymap
# END OF *Messages* buffer

# BEGIN OF *Backtrace* buffer
Debugger entered--Lisp error: (void-function make-composed-keymap)
  (make-composed-keymap must-match-map anything-map)
  (if must-match-map (make-composed-keymap must-match-map anything-map) anything-map)
  (let* ((minibuffer-completion-confirm must-match) (must-match-map ...) (anything-map ...) (src-hist ...) (src ...) (src-1 ...) (src-list ...) (anything-execute-action-at-once-if-one exec-when-only-one)) (or (anything :sources src-list :input initial-input :default default :preselect preselect :prompt prompt :resume ... :history ... :buffer buffer) (when ... ...) (unless ... default) (keyboard-quit)))
  (progn (fset (quote action-fn) (function* ...)) (when (eq must-match ...) (setq must-match ...)) (let* (... ... ... ... ... ... ... ...) (or ... ... ... ...)))
  (unwind-protect (progn (fset ... ...) (when ... ...) (let* ... ...)) (if --cl-letf-bound-- (fset ... --cl-letf-save--) (fmakunbound ...)))
  (let* ((--cl-letf-bound-- ...) (--cl-letf-save-- ...)) (unwind-protect (progn ... ... ...) (if --cl-letf-bound-- ... ...)))
  (letf ((... ...)) (when (eq must-match ...) (setq must-match ...)) (let* (... ... ... ... ... ... ... ...) (or ... ... ... ...)))
  (letf* ((... ...)) (when (eq must-match ...) (setq must-match ...)) (let* (... ... ... ... ... ... ... ...) (or ... ... ... ...)))
  (flet ((action-fn ... ...)) (when (eq must-match ...) (setq must-match ...)) (let* (... ... ... ... ... ... ... ...) (or ... ... ... ...)))
  (catch (quote --cl-block-anything-comp-read--) (when (get-buffer anything-action-buffer) (kill-buffer anything-action-buffer)) (flet (...) (when ... ...) (let* ... ...)))
  (cl-block-wrapper (catch (quote --cl-block-anything-comp-read--) (when ... ...) (flet ... ... ...)))
  (block anything-comp-read (when (get-buffer anything-action-buffer) (kill-buffer anything-action-buffer)) (flet (...) (when ... ...) (let* ... ...)))
  (let* ((test ...) (initial-input ...) (default ...) (preselect ...) (buffer ...) (must-match ...) (requires-pattern ...) (history ...) (input-history ...) (persistent-action ...) (persistent-help ...) (name ...) (candidates-in-buffer ...) (exec-when-only-one ...) (volatile ...) (sort ...) (fc-transformer ...) (marked-candidates ...) (alistp ...)) (let (...) (while --cl-keys-- ...)) (block anything-comp-read (when ... ...) (flet ... ... ...)))
  anything-comp-read("M-x " [str-key anything-c-source-bookmark-ssh-files&dirs object-add-to-list anchor ido-completion-buffer-full vc-sccs tree-widget-action pgg-pgp ido-auto-merge-work-directories-length make-mode cfengine eshell-io idlw-help erc-backend delphi wid-browse ido-completion-map info-title org-table-settings ido-pop-dir anything-c-source-bookmarks-ssh compilation-find-file anything-ff-kill-buffer-fname anything-M-x-transformer ido-minibuffer-setup-hook org-feed erc-truncate erc-sound imenu-eager-completion-buffer newsticker-headline-processing enable-match-plugin :button-face LOCAL Save\ list\ now zero-or-more obj-temp ido-tidy erc-speedbar ido-rotate ido-makealist temp-file-name anything-M-x-key-face gnus-article-signature ido-enter-dired anything-c-source-semantic esh-cmd ido-to-end ido-setup-hook erc-mode-line-and-header ido-record-work-file ...] :test commandp :requires-pattern 2 :name "Emacs Commands" :persistent-action pers-help :persistent-help "Describe this command" :history ("toggle-debug-on-error" "anything" "eval-buffer" "shell") :sort string-lessp :must-match t :candidates-in-buffer t :fc-transformer anything-M-x-transformer)
  (let* ((command ...) (sym-com ...)) (unless current-prefix-arg (setq current-prefix-arg anything-current-prefix-arg)) (setq this-command sym-com) (call-interactively sym-com) (setq extended-command-history (cons command ...)))
  (progn (fset (quote pers-help) (function* ...)) (let* (... ...) (unless current-prefix-arg ...) (setq this-command sym-com) (call-interactively sym-com) (setq extended-command-history ...)))
  (unwind-protect (progn (fset ... ...) (let* ... ... ... ... ...)) (if --cl-letf-bound-- (fset ... --cl-letf-save--) (fmakunbound ...)))
  (let* ((--cl-letf-bound-- ...) (--cl-letf-save-- ...)) (unwind-protect (progn ... ...) (if --cl-letf-bound-- ... ...)))
  (letf ((... ...)) (let* (... ...) (unless current-prefix-arg ...) (setq this-command sym-com) (call-interactively sym-com) (setq extended-command-history ...)))
  (letf* ((... ...)) (let* (... ...) (unless current-prefix-arg ...) (setq this-command sym-com) (call-interactively sym-com) (setq extended-command-history ...)))
  (flet ((pers-help ... ...)) (let* (... ...) (unless current-prefix-arg ...) (setq this-command sym-com) (call-interactively sym-com) (setq extended-command-history ...)))
  (let* (in-help help-cand special-display-buffer-names special-display-regexps anything-persistent-action-use-special-display (history ...)) (flet (...) (let* ... ... ... ... ...)))
  anything-M-x()
  call-interactively(anything-M-x nil nil)
# END OF *Backtrace* buffer

# BEGIN OF init.el
 (add-to-list 'load-path "~/.emacs.d/elisp")
 (add-to-list 'load-path "~/.emacs.d/auto-install")

 (require 'auto-install)
 (setq auto-install-directory "~/.emacs.d/auto-install/")
 (auto-install-update-emacswiki-package-name t)
 (auto-install-compatibility-setup)

 (require 'anything)
 (require 'anything-config)
# END OF init.el

How to send a bug report:
  1) Be sure to use the LATEST version of anything.el.
  2) Enable debugger. M-x toggle-debug-on-error or (setq debug-on-error t)
  3) Use Lisp version instead of compiled one: (load "anything.el")
  4) If you got an error, please paste *Backtrace* buffer.
  5) Type C-c C-c to send.



Emacs  : GNU Emacs 23.2.1 (i386-mingw-nt5.1.2600)
 of 2010-05-08 on G41R2F1
Package: anything.el

current state:
==============
(setq
 anything-M-x-input-history nil
 anything-action-buffer "*anything action*"
 anything-additional-attributes '(name header-name candidates action coerce type init delayed-init match candidate-transformer
				  filtered-candidate-transformer action-transformer pattern-transformer delayed volatile requires-pattern
				  persistent-action candidates-in-buffer search search-from-end get-line display-to-real real-to-display cleanup
				  candidate-number-limit accept-empty disable-shortcuts dummy multiline update mode-line header-line resume
				  grep-candidates default-directory before-jump-hook after-jump-hook adjust recenter target-file info-index index-nodes
				  candidates-file headline condition subexp persistent-help default-action)
 anything-additional-type-attributes nil
 anything-after-action-hook '(anything-c-ffap-line-goto-line)
 anything-after-initialize-hook '(anything-reset-marked-candidates anything-clear-visible-mark)
 anything-after-persistent-action-hook '(anything-match-line-update anything-c-ffap-line-goto-line anything-reset-yank-point)
 anything-after-update-hook '(anything-after-update-hook--outline anything-ff-maybe-mark-candidates anything-ff-auto-expand-to-home-or-root
			      anything-ff-update-when-only-one-matched anything-ff-retrieve-last-expanded anything-confirm-and-exit-hook)
 anything-allow-skipping-current-buffer t
 anything-argument-keys '(:sources :input :prompt :resume :preselect :buffer :keymap :default :history)
 anything-async-processes nil
 anything-attributes '(name header-name candidates action coerce type init delayed-init match candidate-transformer filtered-candidate-transformer
		       action-transformer pattern-transformer delayed volatile requires-pattern persistent-action candidates-in-buffer search
		       search-from-end get-line display-to-real real-to-display cleanup candidate-number-limit accept-empty disable-shortcuts dummy
		       multiline update mode-line header-line resume grep-candidates default-directory before-jump-hook after-jump-hook adjust recenter
		       target-file info-index index-nodes candidates-file headline condition subexp persistent-help default-action)
 anything-auto-install-buffer "*anything auto install*"
 anything-before-action-hook '((lambda nil (when anything-c-use-adaptative-sorting (anything-c-adaptive-store-selection)))
			       anything-ff-before-action-hook-fn)
 anything-before-initialize-hook '((lambda nil (when anything-c-use-adaptative-sorting (setq anything-c-adaptive-done nil))))
 anything-browse-url-default-browser-alist '(("/usr/bin/w3m" . w3m-browse-url) ("firefox" . browse-url-firefox)
					     ("chromium-browser" . ac-browse-url-chromium) ("uzbl-browser" . ac-browse-url-uzbl)
					     ("kfmclient" . browse-url-kde) ("gnome-moz-remote" . browse-url-gnome-moz) ("mozilla" . browse-url-mozilla)
					     ("galeon" . browse-url-galeon) ("netscape" . browse-url-netscape) ("xmosaic" . browse-url-mosaic)
					     ("xterm" . browse-url-text-xterm))
 anything-buffer "*anything*"
 anything-buffer-file-name "n:/tool/emacs.d-d20111215-anything/.emacs.d/init.el"
 anything-buffer-mode-line-string '("Buffer(s)"
				    "\\<anything-c-buffer-map>\\[anything-c-buffer-help]:Help, \\<anything-map>\\[anything-select-action]:Acts,\\[anything-exit-minibuffer]/\\[anything-select-2nd-action-or-end-of-line]/\\[anything-select-3rd-action]:NthAct,\\[anything-send-bug-report-from-anything]:BugReport." "String displayed in mode-line in `anything-c-source-buffers-list'")
 anything-buffers '("*anything for files*" "*anything commands*" "*anything*")
 anything-bug-report-salutation "Describe bug below, using a precise recipe.\n\nWhen I executed M-x ...\n\nHow to send a bug report:\n  1) Be sure to use the LATEST version of anything.el.\n  2) Enable debugger. M-x toggle-debug-on-error or (setq debug-on-error t)\n  3) Use Lisp version instead of compiled one: (load \"anything.el\")\n  4) If you got an error, please paste *Backtrace* buffer.\n  5) Type C-c C-c to send."
 anything-build-regexp-history nil
 anything-c-adaptive-done nil
 anything-c-adaptive-history nil
 anything-c-adaptive-history-file "~/.emacs.d/anything-c-adaptive-history"
 anything-c-adaptive-history-length 50
 anything-c-apt-all-packages nil
 anything-c-apt-input-history nil
 anything-c-apt-installed-packages nil
 anything-c-apt-query "emacs"
 anything-c-apt-search-command "apt-cache search '%s'"
 anything-c-apt-show-command "apt-cache show '%s'"
 anything-c-auto-document-data nil
 anything-c-bbdb-name nil
 anything-c-bookmarks-face1 'anything-ff-directory
 anything-c-bookmarks-face2 'anything-ff-file
 anything-c-bookmarks-face3 'anything-bookmarks-su-face
 anything-c-boring-buffer-regexp "\\(\\` \\)\\|\\*anything\\|\\*ac-mode\\| \\*Echo Area\\| \\*Minibuf"
 anything-c-boring-file-regexp "/\\(?:\\(?:\\.\\(?:git\\|hg\\|svn\\)\\|CVS\\|_darcs\\)\\)\\(?:/\\|$\\)\\|^\\.#\\|\\(?:\\(?:\\.\\(?:class\\|la\\|o\\)\\|~\\)\\)$"
 anything-c-browse-code-regexp-alist '((lisp-interaction-mode .
					"^ *(def\\(un\\|subst\\|macro\\|face\\|alias\\|advice\\|struct\\|type\\|theme\\|var\\|group\\|custom\\|const\\|method\\|class\\)")
				       (emacs-lisp-mode .
					"^ *(def\\(un\\|subst\\|macro\\|face\\|alias\\|advice\\|struct\\|type\\|theme\\|var\\|group\\|custom\\|const\\|method\\|class\\)")
				       (lisp-mode .
					"^ *(def\\(un\\|subst\\|macro\\|face\\|alias\\|advice\\|struct\\|type\\|theme\\|var\\|group\\|custom\\|const\\|method\\|class\\)")
				       (python-mode . "\\<def\\>\\|\\<class\\>"))
 anything-c-browse-code-regexp-lisp "^ *(def\\(un\\|subst\\|macro\\|face\\|alias\\|advice\\|struct\\|type\\|theme\\|var\\|group\\|custom\\|const\\|method\\|class\\)"
 anything-c-browse-code-regexp-python "\\<def\\>\\|\\<class\\>"
 anything-c-buffer-display-string-functions '(anything-c-buffer-display-string--compilation anything-c-buffer-display-string--shell
					      anything-c-buffer-display-string--eshell)
 anything-c-cache-gentoo nil
 anything-c-cache-world nil
 anything-c-cached-imenu-alist nil
 anything-c-cached-imenu-candidates nil
 anything-c-cached-imenu-tick nil
 anything-c-copy-async-prefered-emacs "emacs"
 anything-c-copy-files-async-log-file "/tmp/dired.log"
 anything-c-ctags-modes '(c-mode c++-mode awk-mode csharp-mode java-mode javascript-mode lua-mode makefile-mode pascal-mode perl-mode cperl-mode php-mode
			  python-mode scheme-mode sh-mode slang-mode sql-mode tcl-mode)
 anything-c-default-external-file-browser "nautilus"
 anything-c-default-zgrep-command "zgrep -niH -e %p %f"
 anything-c-eldoc-in-minibuffer-show-fn 'anything-c-show-info-in-mode-line
 anything-c-enable-eval-defun-hack t
 anything-c-etags-cache #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data ())
 anything-c-etags-mtime-alist nil
 anything-c-etags-search-regexp "^.+: .+ \\<%s"
 anything-c-etags-tag-file-dir nil
 anything-c-etags-tag-file-name "TAGS"
 anything-c-etags-tag-file-search-limit 10
 anything-c-etags-use-regexp-search nil
 anything-c-external-commands-list nil
 anything-c-external-programs-associations nil
 anything-c-ffap-line-location nil
 anything-c-file-cache-files nil
 anything-c-file-cache-initialized-p t
 anything-c-filelist-file-name nil
 anything-c-find-files-doc-header " (`C-l': Go to precedent level)"
 anything-c-firefox-bookmarks-alist nil
 anything-c-function-abbrev-regexp nil
 anything-c-gentoo-buffer "*anything-gentoo-output*"
 anything-c-gentoo-use-flags nil
 anything-c-google-suggest-default-browser-function nil
 anything-c-google-suggest-default-function 'anything-c-google-suggest-set-candidates
 anything-c-google-suggest-search-url "http://www.google.com/search?ie=utf-8&oe=utf-8&q="
 anything-c-google-suggest-url "http://google.com/complete/search?output=toolbar&q="
 anything-c-grep-debug-command-line nil
 anything-c-grep-default-command "grep -d skip %e -niH -e %p %f"
 anything-c-grep-default-function 'anything-c-grep-init
 anything-c-grep-default-recurse-command "grep -d recurse %e -niH -e %p %f"
 anything-c-grep-history nil
 anything-c-grep-max-length-history 100
 anything-c-grep-use-ioccur-style-keys t
 anything-c-home-url "http://www.google.fr"
 anything-c-imenu-delimiter " / "
 anything-c-imenu-index-filter nil
 anything-c-info-pages nil
 anything-c-kill-ring-max-lines-number nil
 anything-c-locate-command nil
 anything-c-man-pages nil
 anything-c-org-keywords-info-location '(("#+TITLE:" . "(org)Export options") ("#+AUTHOR:" . "(org)Export options") ("#+DATE:" . "(org)Export options")
					 ("#+EMAIL:" . "(org)Export options") ("#+DESCRIPTION:" . "(org)Export options")
					 ("#+KEYWORDS:" . "(org)Export options") ("#+LANGUAGE:" . "(org)Export options")
					 ("#+TEXT:" . "(org)Export options") ("#+TEXT:" . "(org)Export options") ("#+OPTIONS:" . "(org)Export options")
					 ("#+BIND:" . "(org)Export options") ("#+LINK_UP:" . "(org)Export options")
					 ("#+LINK_HOME:" . "(org)Export options") ("#+LATEX_HEADER:" . "(org)Export options")
					 ("#+EXPORT_SELECT_TAGS:" . "(org)Export options") ("#+EXPORT_EXCLUDE_TAGS:" . "(org)Export options")
					 ("#+INFOJS_OPT" . "(org)Javascript support") ("#+BEGIN_HTML" . "(org)Quoting HTML tags")
					 ("#+BEGIN_LaTeX" . "(org)Quoting LaTeX code") ("#+ORGTBL" . "(org)Radio tables")
					 ("#+HTML:" . "(org)Quoting HTML tags") ("#+LaTeX:" . "(org)Quoting LaTeX code")
					 ("#+BEGIN:" . "(org)Dynamic blocks") ("#+BEGIN_EXAMPLE" . "(org)Literal examples")
					 ("#+BEGIN_QUOTE" . "(org)Paragraphs") ("#+BEGIN_VERSE" . "(org)Paragraphs")
					 ("#+BEGIN_SRC" . "(org)Literal examples") ("#+CAPTION" . "(org)Tables in HTML export")
					 ("#+LABEL" . "(org)Tables in LaTeX export") ("#+ATTR_HTML" . "(org)Links")
					 ("#+ATTR_LaTeX" . "(org)Images in LaTeX export"))
 anything-c-pdfgrep-debug-command-line nil
 anything-c-pdfgrep-default-command "pdfgrep --color never -niH %s %s"
 anything-c-pdfgrep-default-function 'anything-c-pdfgrep-init
 anything-c-pdfgrep-default-read-command "xpdf '%f' %p"
 anything-c-rzgrep-cache #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data ())
 anything-c-show-completion-overlay nil
 anything-c-show-info-in-mode-line-delay 12
 anything-c-simple-call-tree-function-index 0
 anything-c-simple-call-tree-related-functions nil
 anything-c-simple-call-tree-tick nil
 anything-c-top-command "COLUMNS=%s top -b -n 1"
 anything-c-turn-on-show-completion t
 anything-c-ucs-max-len 0
 anything-c-ucs-mode-line-string "\\<anything-c-ucs-map>\\[anything-c-ucs-help]:Help, \\<anything-map>\\[anything-select-action]:Acts,\\[anything-exit-minibuffer]/\\[anything-select-2nd-action-or-end-of-line]/\\[anything-select-3rd-action]:NthAct."
 anything-c-use-adaptative-sorting nil
 anything-c-w3m-bookmarks-alist nil
 anything-c-xfonts-cache nil
 anything-c-xrandr-output "VGA"
 anything-c-xrandr-screen "0"
 anything-c-yahoo-suggest-search-url "http://search.yahoo.com/search?&ei=UTF-8&fr&h=c&p="
 anything-c-yahoo-suggest-url "http://search.yahooapis.com/WebSearchService/V1/relatedSuggestion?appid=Generic&query="
 anything-c-yaoddmuse-cache-file "~/.emacs.d/yaoddmuse-cache.el"
 anything-c-yaoddmuse-ew-cache nil
 anything-c-zgrep-recurse-flag nil
 anything-candidate-number-limit 50
 anything-candidate-separator "--------------------"
 anything-check-minibuffer-input-timer nil
 anything-cleanup-hook '(anything-match-line-cleanup anything-reset-yank-point anything-ff-save-history)
 anything-command-map-prefix-key "<f5> a"
 anything-compile-source-functions '(anything-compile-source--persistent-help anything-compile-source--anything-headline
				     anything-compile-source--candidates-file anything-compile-source--info-index anything-compile-source--grep-candidates
				     anything-compile-source--type anything-compile-source--dummy anything-compile-source--disable-shortcuts
				     anything-compile-source--candidates-in-buffer anything-compile-source--match-plugin
				     anything-compile-source--type-customize anything-compile-source--default-action)
 anything-compile-source-functions-default '(anything-compile-source--type anything-compile-source--dummy anything-compile-source--disable-shortcuts
					     anything-compile-source--candidates-in-buffer)
 anything-compiled-sources '(((match anything-exact-match anything-mp-3p-match anything-mp-3-match)
			      (search anything-exact-search anything-mp-3p-search anything-mp-3-search) (name . "File/Lineno at point")
			      (init lambda nil (require (quote ffap))) (candidates . anything-c-ffap-line-candidates) (type . file)
			      (header-line . anything-persistent-help-string)
			      (action ("Find file" . anything-find-many-files) ("Find file as root" . anything-find-file-as-root)
			       ("Find file other window" . find-file-other-window) ("Find file other frame" . find-file-other-frame)
			       ("Open dired in file's directory" . anything-c-open-dired) ("Grep File(s) `C-u recurse'" . anything-find-files-grep)
			       ("Zgrep File(s) `C-u Recurse'" . anything-ff-zgrep) ("Pdfgrep File(s)" . anything-ff-pdfgrep)
			       ("Checksum File" . anything-ff-checksum) ("Ediff File" . anything-find-files-ediff-files)
			       ("Ediff Merge File" . anything-find-files-ediff-merge-files) ("View file" . view-file) ("Insert file" . insert-file)
			       ("Delete file(s)" . anything-delete-marked-files)
			       ("Open file externally (C-u to choose)" . anything-c-open-file-externally)
			       ("Open file with default tool" . anything-c-open-file-with-default-tool) ("Find file in hex dump" . hexl-find-file))
			      (persistent-help . "Show this file")
			      (action-transformer anything-c-transform-file-load-el anything-c-transform-file-browse-url)
			      (candidate-transformer anything-c-w32-pathname-transformer anything-c-skip-current-file anything-c-skip-boring-files
			       anything-c-shorten-home-path)
			      )
			     ((match anything-exact-match anything-mp-3p-match anything-mp-3-match)
			      (search anything-exact-search anything-mp-3p-search anything-mp-3-search) (name . "File at point")
			      (init lambda nil (require (quote ffap)))
			      (candidates lambda nil (anything-aif (with-anything-current-buffer (ffap-guesser)) (list it))) (type . file)
			      (header-line . anything-persistent-help-string)
			      (action ("Find file" . anything-find-many-files) ("Find file as root" . anything-find-file-as-root)
			       ("Find file other window" . find-file-other-window) ("Find file other frame" . find-file-other-frame)
			       ("Open dired in file's directory" . anything-c-open-dired) ("Grep File(s) `C-u recurse'" . anything-find-files-grep)
			       ("Zgrep File(s) `C-u Recurse'" . anything-ff-zgrep) ("Pdfgrep File(s)" . anything-ff-pdfgrep)
			       ("Checksum File" . anything-ff-checksum) ("Ediff File" . anything-find-files-ediff-files)
			       ("Ediff Merge File" . anything-find-files-ediff-merge-files) ("View file" . view-file) ("Insert file" . insert-file)
			       ("Delete file(s)" . anything-delete-marked-files)
			       ("Open file externally (C-u to choose)" . anything-c-open-file-externally)
			       ("Open file with default tool" . anything-c-open-file-with-default-tool) ("Find file in hex dump" . hexl-find-file))
			      (persistent-help . "Show this file")
			      (action-transformer anything-c-transform-file-load-el anything-c-transform-file-browse-url)
			      (candidate-transformer anything-c-w32-pathname-transformer anything-c-skip-current-file anything-c-skip-boring-files
			       anything-c-shorten-home-path)
			      )
			     ((match anything-exact-match anything-mp-3p-match anything-mp-3-match anything-c-buffer-match-major-mode)
			      (search anything-exact-search anything-mp-3p-search anything-mp-3-search) (name . "Buffers")
			      (candidates . anything-c-buffer-list) (type . buffer) (match anything-c-buffer-match-major-mode)
			      (candidate-transformer anything-c-skip-boring-buffers anything-c-highlight-buffers)
			      (persistent-action . anything-c-buffers-list-persistent-action) (volatile) (mode-line . anything-buffer-mode-line-string)
			      (persistent-help . "Show this buffer / C-u \\[anything-execute-persistent-action]: Kill this buffer")
			      (header-line . anything-persistent-help-string)
			      (action ("Switch to buffer" . anything-c-switch-to-buffer) ("Switch to buffer other window" . switch-to-buffer-other-window)
			       ("Switch to buffer other frame" . switch-to-buffer-other-frame)
			       ("Query replace regexp" . anything-c-buffer-query-replace-regexp) ("Query replace" . anything-c-buffer-query-replace)
			       ("View buffer" . view-buffer) ("Display buffer" . display-buffer)
			       ("Grep buffers (C-u grep all buffers)" . anything-c-grep-buffers) ("Revert buffer(s)" . anything-revert-marked-buffers)
			       ("Insert buffer" . insert-buffer) ("Kill buffer(s)" . anything-kill-marked-buffers)
			       ("Diff with file" . diff-buffer-with-file) ("Ediff Marked buffers" . anything-ediff-marked-buffers)
			       ("Ediff Merge marked buffers" lambda (candidate) (anything-ediff-marked-buffers candidate t)))
			      (persistent-help . "Show this buffer")
			      (candidate-transformer anything-c-skip-current-buffer anything-c-skip-boring-buffers
			       anything-c-transform-buffer-display-string)
			      )
			     ((match anything-exact-match anything-mp-3p-match anything-mp-3-match anything-c-match-on-basename)
			      (search anything-exact-search anything-mp-3p-search anything-mp-3-search)
			      (init (lambda nil (require (quote recentf)) (or recentf-mode (recentf-mode 1))) anything-save-enable-shortcuts)
			      (resume anything-save-enable-shortcuts)
			      (cleanup (lambda nil (setq anything-enable-shortcuts anything-orig-enable-shortcuts))) (name . "Recentf")
			      (init lambda nil (require (quote recentf)) (or recentf-mode (recentf-mode 1))) (disable-shortcuts)
			      (candidates . recentf-list) (match anything-c-match-on-basename) (type . file)
			      (header-line . anything-persistent-help-string)
			      (action ("Find file" . anything-find-many-files) ("Find file as root" . anything-find-file-as-root)
			       ("Find file other window" . find-file-other-window) ("Find file other frame" . find-file-other-frame)
			       ("Open dired in file's directory" . anything-c-open-dired) ("Grep File(s) `C-u recurse'" . anything-find-files-grep)
			       ("Zgrep File(s) `C-u Recurse'" . anything-ff-zgrep) ("Pdfgrep File(s)" . anything-ff-pdfgrep)
			       ("Checksum File" . anything-ff-checksum) ("Ediff File" . anything-find-files-ediff-files)
			       ("Ediff Merge File" . anything-find-files-ediff-merge-files) ("View file" . view-file) ("Insert file" . insert-file)
			       ("Delete file(s)" . anything-delete-marked-files)
			       ("Open file externally (C-u to choose)" . anything-c-open-file-externally)
			       ("Open file with default tool" . anything-c-open-file-with-default-tool) ("Find file in hex dump" . hexl-find-file))
			      (persistent-help . "Show this file")
			      (action-transformer anything-c-transform-file-load-el anything-c-transform-file-browse-url)
			      (candidate-transformer anything-c-w32-pathname-transformer anything-c-skip-current-file anything-c-skip-boring-files
			       anything-c-shorten-home-path)
			      )
			     ((match anything-exact-match anything-mp-3p-match anything-mp-3-match)
			      (search anything-exact-search anything-mp-3p-search anything-mp-3-search) (name . "Bookmarks")
			      (init lambda nil (require (quote bookmark))) (candidates . bookmark-all-names) (type . bookmark)
			      (header-line . anything-persistent-help-string) (coerce . anything-bookmark-get-bookmark-from-name)
			      (action
			       ("Jump to bookmark" lambda (bookmark) (let ((current-prefix-arg anything-current-prefix-arg)) (bookmark-jump bookmark))
				(anything-update))
			       ("Jump to BM other window" lambda (bookmark) (bookmark-jump-other-window bookmark) (anything-update))
			       ("Bookmark edit annotation" . bookmark-edit-annotation) ("Bookmark show annotation" . bookmark-show-annotation)
			       ("Delete bookmark(s)" . anything-delete-marked-bookmarks) ("Rename bookmark" . bookmark-rename)
			       ("Relocate bookmark" . bookmark-relocate))
			      )
			     ((match anything-exact-match anything-mp-3p-match anything-mp-3-match anything-c-match-on-basename)
			      (search anything-exact-search anything-mp-3p-search anything-mp-3-search) (name . "File Cache")
			      (init lambda nil (require (quote filecache) nil t)
			       (unless anything-c-file-cache-initialized-p
				(setq anything-c-file-cache-files
				 (loop for item in file-cache-alist append
				  (destructuring-bind (base &rest dirs) item (loop for dir in dirs collect (concat dir base))))
				 )
				(defadvice file-cache-add-file (after file-cache-list activate)
				 (add-to-list (quote anything-c-file-cache-files) (expand-file-name file)))
				(setq anything-c-file-cache-initialized-p t))
			       )
			      (candidates . anything-c-file-cache-files) (match anything-c-match-on-basename) (type . file)
			      (header-line . anything-persistent-help-string)
			      (action ("Find file" . anything-find-many-files) ("Find file as root" . anything-find-file-as-root)
			       ("Find file other window" . find-file-other-window) ("Find file other frame" . find-file-other-frame)
			       ("Open dired in file's directory" . anything-c-open-dired) ("Grep File(s) `C-u recurse'" . anything-find-files-grep)
			       ("Zgrep File(s) `C-u Recurse'" . anything-ff-zgrep) ("Pdfgrep File(s)" . anything-ff-pdfgrep)
			       ("Checksum File" . anything-ff-checksum) ("Ediff File" . anything-find-files-ediff-files)
			       ("Ediff Merge File" . anything-find-files-ediff-merge-files) ("View file" . view-file) ("Insert file" . insert-file)
			       ("Delete file(s)" . anything-delete-marked-files)
			       ("Open file externally (C-u to choose)" . anything-c-open-file-externally)
			       ("Open file with default tool" . anything-c-open-file-with-default-tool) ("Find file in hex dump" . hexl-find-file))
			      (persistent-help . "Show this file")
			      (action-transformer anything-c-transform-file-load-el anything-c-transform-file-browse-url)
			      (candidate-transformer anything-c-w32-pathname-transformer anything-c-skip-current-file anything-c-skip-boring-files
			       anything-c-shorten-home-path)
			      )
			     ((match anything-exact-match anything-mp-3p-match anything-mp-3-match)
			      (search anything-exact-search anything-mp-3p-search anything-mp-3-search) (name . "Files from Current Directory")
			      (candidates lambda nil (with-anything-current-buffer (directory-files (anything-c-current-directory) t)))
			      (candidate-transformer anything-c-highlight-files) (type . file) (header-line . anything-persistent-help-string)
			      (action ("Find file" . anything-find-many-files) ("Find file as root" . anything-find-file-as-root)
			       ("Find file other window" . find-file-other-window) ("Find file other frame" . find-file-other-frame)
			       ("Open dired in file's directory" . anything-c-open-dired) ("Grep File(s) `C-u recurse'" . anything-find-files-grep)
			       ("Zgrep File(s) `C-u Recurse'" . anything-ff-zgrep) ("Pdfgrep File(s)" . anything-ff-pdfgrep)
			       ("Checksum File" . anything-ff-checksum) ("Ediff File" . anything-find-files-ediff-files)
			       ("Ediff Merge File" . anything-find-files-ediff-merge-files) ("View file" . view-file) ("Insert file" . insert-file)
			       ("Delete file(s)" . anything-delete-marked-files)
			       ("Open file externally (C-u to choose)" . anything-c-open-file-externally)
			       ("Open file with default tool" . anything-c-open-file-with-default-tool) ("Find file in hex dump" . hexl-find-file))
			      (persistent-help . "Show this file")
			      (action-transformer anything-c-transform-file-load-el anything-c-transform-file-browse-url)
			      (candidate-transformer anything-c-w32-pathname-transformer anything-c-skip-current-file anything-c-skip-boring-files
			       anything-c-shorten-home-path)
			      )
			     ((match anything-exact-match anything-mp-3p-match anything-mp-3-match)
			      (search anything-exact-search anything-mp-3p-search anything-mp-3-search) (name . "Locate")
			      (candidates . anything-c-locate-init) (type . file) (requires-pattern . 3) (candidate-number-limit . 9999)
			      (mode-line . anything-generic-file-mode-line-string) (delayed) (header-line . anything-persistent-help-string)
			      (action ("Find file" . anything-find-many-files) ("Find file as root" . anything-find-file-as-root)
			       ("Find file other window" . find-file-other-window) ("Find file other frame" . find-file-other-frame)
			       ("Open dired in file's directory" . anything-c-open-dired) ("Grep File(s) `C-u recurse'" . anything-find-files-grep)
			       ("Zgrep File(s) `C-u Recurse'" . anything-ff-zgrep) ("Pdfgrep File(s)" . anything-ff-pdfgrep)
			       ("Checksum File" . anything-ff-checksum) ("Ediff File" . anything-find-files-ediff-files)
			       ("Ediff Merge File" . anything-find-files-ediff-merge-files) ("View file" . view-file) ("Insert file" . insert-file)
			       ("Delete file(s)" . anything-delete-marked-files)
			       ("Open file externally (C-u to choose)" . anything-c-open-file-externally)
			       ("Open file with default tool" . anything-c-open-file-with-default-tool) ("Find file in hex dump" . hexl-find-file))
			      (persistent-help . "Show this file")
			      (action-transformer anything-c-transform-file-load-el anything-c-transform-file-browse-url)
			      (candidate-transformer anything-c-w32-pathname-transformer anything-c-skip-current-file anything-c-skip-boring-files
			       anything-c-shorten-home-path)
			      )
			     )
 anything-completing-read-handlers-alist '((describe-function . anything-completing-read-symbols) (describe-variable . anything-completing-read-symbols)
					   (debug-on-entry . anything-completing-read-symbols) (find-function . anything-completing-read-symbols)
					   (trace-function . anything-completing-read-symbols)
					   (trace-function-background . anything-completing-read-symbols)
					   (find-tag . anything-completing-read-with-cands-in-buffer) (ffap-alternate-file))
 anything-completion-mode nil
 anything-completion-mode-quit-message "Anything completion disabled"
 anything-completion-mode-start-message "Anything completion enabled"
 anything-completion-mode-string " AC"
 anything-create--actions-private nil
 anything-current-buffer #<buffer init.el>
 anything-current-position '(355 . 1)
 anything-current-prefix-arg nil
 anything-debug nil
 anything-debug-forms nil
 anything-debug-variables nil
 anything-default-match-functions '((lambda (candidate) (string-match anything-pattern candidate)))
 anything-delayed-init-executed nil
 anything-digit-shortcut-count 0
 anything-dired-mode "Enable anything completion in Dired functions.\nBindings affected are C, R, S, H.\nThis is deprecated for Emacs24+ users, use `ac-mode' instead."
 anything-display-function 'anything-default-display-buffer
 anything-display-source-at-screen-top t
 anything-ec-target ""
 anything-eldoc-active-minibuffers-list nil
 anything-enable-digit-shortcuts nil
 anything-enable-shortcuts nil
 anything-eshell-command-on-file-input-history nil
 anything-etags-mode-line-string "\\<anything-c-etags-map>\\[anything-etags-help]:Help,\\<anything-map>\\[anything-select-action]:Acts,\\[anything-exit-minibuffer]/\\[anything-select-2nd-action-or-end-of-line]/\\[anything-select-3rd-action]:NthAct,\\[anything-send-bug-report-from-anything]:BugReport."
 anything-eval-expression-input-history nil
 anything-exact-pattern-real nil
 anything-exact-pattern-str nil
 anything-execute-action-at-once-if-one nil
 anything-exit-status 1
 anything-external-command-history nil
 anything-ff-auto-update-flag nil
 anything-ff-auto-update-initial-value t
 anything-ff-avfs-directory nil
 anything-ff-cand-to-mark nil
 anything-ff-default-directory nil
 anything-ff-default-kbsize 1024.0
 anything-ff-exif-data-program "exiftran"
 anything-ff-exif-data-program-args "-d"
 anything-ff-file-compressed-list '("gz" "bz2" "zip" "7z")
 anything-ff-history nil
 anything-ff-history-max-length 100
 anything-ff-last-expanded nil
 anything-ff-mode-line-string "\\<anything-find-files-map>\\[anything-ff-help]:Help, \\[anything-send-bug-report-from-anything]:BugReport, \\<anything-map>\\[anything-select-action]:Acts, \\[anything-exit-minibuffer]/\\[anything-select-2nd-action-or-end-of-line]/\\[anything-select-3rd-action]:NthAct"
 anything-ff-newfile-prompt-p t
 anything-ff-printer-list nil
 anything-ff-quick-delete-dont-prompt-for-deletion nil
 anything-ff-signal-error-on-dot-files t
 anything-ff-smart-completion t
 anything-ff-tramp-not-fancy t
 anything-ff-transformer-show-only-basename nil
 anything-file-completion-sources '("Find Files" "Read File Name" "Read File Name History" "Copy Files" "Rename Files" "Symlink Files" "Hardlink Files"
				    "Write File" "Insert File")
 anything-firefox-bookmark-url-regexp "\\(https\\|http\\|ftp\\|about\\|file\\)://[^ \"]*"
 anything-firefox-bookmarks-regexp ">\\([^><]+.[^</a>]\\)"
 anything-follow-mode nil
 anything-for-files-prefered-list '(anything-c-source-ffap-line anything-c-source-ffap-guesser anything-c-source-buffers-list anything-c-source-recentf
				    anything-c-source-bookmarks anything-c-source-file-cache anything-c-source-files-in-current-dir+
				    anything-c-source-locate)
 anything-generic-file-mode-line-string "\\<anything-generic-files-map>\\[anything-generic-file-help]:Help, \\<anything-map>\\[anything-select-action]:Acts,\\[anything-exit-minibuffer]/\\[anything-select-2nd-action-or-end-of-line]/\\[anything-select-3rd-action]:NthAct,\\[anything-send-bug-report-from-anything]:BugReport."
 anything-ggs-max-length-num-flag 0
 anything-ggs-max-length-real-flag 0
 anything-google-suggest-use-curl-p nil
 anything-grep-candidates-fast-directory-regexp nil
 anything-grep-mode-line-string "\\<anything-c-grep-map>\\[anything-grep-help]:Help,\\<anything-map>\\[anything-select-action]:Acts,\\[anything-exit-minibuffer]/\\[anything-select-2nd-action-or-end-of-line]/\\[anything-select-3rd-action]:NthAct,\\[anything-send-bug-report-from-anything]:BugReport."
 anything-idle-delay 0.3
 anything-in-persistent-action nil
 anything-input ""
 anything-input-idle-delay 0.3
 anything-input-local ""
 anything-issued-errors nil
 anything-kill-ring-threshold 10
 anything-last-buffer "*anything for files*"
 anything-last-frame-or-window-configuration #<window-configuration>
 anything-last-log-file nil
 anything-last-sources '(anything-c-source-ffap-line anything-c-source-ffap-guesser anything-c-source-buffers-list anything-c-source-recentf
			 anything-c-source-bookmarks anything-c-source-file-cache anything-c-source-files-in-current-dir+ anything-c-source-locate)
 anything-last-sources-local '(anything-c-source-ffap-line anything-c-source-ffap-guesser anything-c-source-buffers-list anything-c-source-recentf
			       anything-c-source-bookmarks anything-c-source-file-cache anything-c-source-files-in-current-dir+ anything-c-source-locate)
 anything-let-variables nil
 anything-lisp-completion-counter 0
 anything-lisp-completion-or-indent-delay 0.6
 anything-locate-db-file-regexp "m?locate.db$"
 anything-maintainer-mail-address "emacs-anything@googlegroups.com"
 anything-mark-ring-cache nil
 anything-marked-candidates nil
 anything-match-line-overlay nil
 anything-minibuffer-confirm-state nil
 anything-mode-line-string '("Buffer(s)"
			     "\\<anything-c-buffer-map>\\[anything-c-buffer-help]:Help, \\<anything-map>\\[anything-select-action]:Acts,\\[anything-exit-minibuffer]/\\[anything-select-2nd-action-or-end-of-line]/\\[anything-select-3rd-action]:NthAct,\\[anything-send-bug-report-from-anything]:BugReport." "String displayed in mode-line in `anything-c-source-buffers-list'")
 anything-mode-line-string-real "C-c ?:Help, TAB:Acts,RET/C-e/C-j:NthAct,C-c C-x C-b:BugReport."
 anything-move-selection-after-hook nil
 anything-move-selection-before-hook nil
 anything-mp-1-pattern-real nil
 anything-mp-1-pattern-str nil
 anything-mp-2-pattern-real nil
 anything-mp-2-pattern-str nil
 anything-mp-3-pattern-list nil
 anything-mp-3-pattern-str " "
 anything-mp-default-match-functions '(anything-exact-match anything-mp-3p-match anything-mp-3-match)
 anything-mp-default-search-backward-functions '(anything-exact-search-backward anything-mp-3p-search-backward anything-mp-3-search-backward)
 anything-mp-default-search-functions '(anything-exact-search anything-mp-3p-search anything-mp-3-search)
 anything-mp-highlight-delay 0.7
 anything-mp-highlight-threshold 2
 anything-mp-initial-highlight-delay nil
 anything-mp-match-source-name t
 anything-mp-space-regexp "[\\ ] "
 anything-no-dump-variables '(anything-candidate-buffer-alist anything-digit-overlays anything-help-message anything-candidate-cache)
 anything-once-called-functions '(((lambda nil (setq anything-orig-enable-shortcuts anything-enable-shortcuts anything-enable-shortcuts nil))))
 anything-orig-enable-shortcuts nil
 anything-outline-goto-near-line-flag t
 anything-outline-using nil
 anything-pattern ""
 anything-pdfgrep-mode-line-string "\\<anything-c-pdfgrep-map>\\[anything-pdfgrep-help]:Help,\\<anything-map>\\[anything-select-action]:Acts,\\[anything-exit-minibuffer]/\\[anything-select-2nd-action-or-end-of-line]/\\[anything-select-3rd-action]:NthAct,\\[anything-send-bug-report-from-anything]:BugReport."
 anything-persistent-action-display-window nil
 anything-persistent-action-use-special-display nil
 anything-prefix-pattern-real nil
 anything-prefix-pattern-str nil
 anything-process-delayed-sources-timer nil
 anything-quick-update nil
 anything-quit nil
 anything-quit-if-no-candidate nil
 anything-raise-command nil
 anything-read-file-name-mode-line-string "\\<anything-c-read-file-map>\\[anything-read-file-name-help]:Help, \\<anything-map>\\[anything-select-action]:Acts,\\[anything-exit-minibuffer]/\\[anything-select-2nd-action-or-end-of-line]/\\[anything-select-3rd-action]:NthAct"
 anything-reading-pattern nil
 anything-restored-variables '(anything-candidate-number-limit anything-source-filter anything-source-in-each-line-flag anything-map anything-sources)
 anything-samewindow nil
 anything-save-configuration-functions '(set-window-configuration . current-window-configuration)
 anything-saved-action nil
 anything-saved-current-source nil
 anything-saved-selection nil
 anything-scroll-amount nil
 anything-select-action-hook '((lambda nil (when anything-c-use-adaptative-sorting (anything-c-adaptive-store-selection))))
 anything-selection-overlay #<overlay from 9 to 16 in *anything for files*>
 anything-selection-point 9
 anything-semantic-candidates nil
 anything-shortcut-keys nil
 anything-shortcut-keys-alist '((alphabet . "asdfghjklzxcvbnmqwertyuiop") (prefix . "asdfghjklzxcvbnmqwertyuiop1234567890") (t . "123456789"))
 anything-source-filter nil
 anything-source-in-each-line-flag nil
 anything-source-name nil
 anything-source-select-buffer "*anything source select*"
 anything-sources '(anything-c-source-buffers-list anything-c-source-recentf anything-c-source-files-in-current-dir+)
 anything-split-window-state 'vertical
 anything-su-or-sudo "su"
 anything-surfraw-default-browser-function nil
 anything-surfraw-engines-history nil
 anything-surfraw-input-history nil
 anything-test-candidate-list nil
 anything-test-mode nil
 anything-tramp-verbose 0
 anything-type-attributes '((timer (real-to-display . anything-c-timer-real-to-display)
			     (action ("Cancel Timer" . cancel-timer) ("Describe Function" lambda (tm) (describe-function (timer--function tm)))
			      ("Find Function" lambda (tm) (find-function (timer--function tm))))
			     (persistent-action lambda (tm) (describe-function (timer--function tm))) (persistent-help . "Describe Function"))
			    (file-line (filtered-candidate-transformer anything-c-filtered-candidate-transformer-file-line) (multiline)
			     (action ("Go to" . anything-c-action-file-line-goto)))
			    (line (display-to-real . anything-c-display-to-real-line) (action ("Go to Line" . anything-c-action-line-goto)))
			    (bookmark (coerce . anything-bookmark-get-bookmark-from-name)
			     (action
			      ("Jump to bookmark" lambda (bookmark) (let ((current-prefix-arg anything-current-prefix-arg)) (bookmark-jump bookmark))
			       (anything-update))
			      ("Jump to BM other window" lambda (bookmark) (bookmark-jump-other-window bookmark) (anything-update))
			      ("Bookmark edit annotation" . bookmark-edit-annotation) ("Bookmark show annotation" . bookmark-show-annotation)
			      ("Delete bookmark(s)" . anything-delete-marked-bookmarks) ("Rename bookmark" . bookmark-rename)
			      ("Relocate bookmark" . bookmark-relocate))
			     )
			    (sexp (action ("Eval s-expression" lambda (c) (eval (read c))) ("Add s-expression to kill ring" . kill-new))
			     (action-transformer anything-c-transform-sexp-eval-command-sexp))
			    (variable
			     (action ("Describe variable" . describe-variable) ("Add variable to kill ring" . anything-c-kill-new)
			      ("Go to variable's definition" . find-variable) ("Set variable" . anything-c-set-variable))
			     (coerce . anything-c-symbolify))
			    (function
			     (action ("Describe command" . describe-function) ("Add command to kill ring" . anything-c-kill-new)
			      ("Go to command's definition" . find-function) ("Debug on entry" . debug-on-entry)
			      ("Cancel debug on entry" . cancel-debug-on-entry) ("Trace function" . trace-function)
			      ("Trace function (background)" . trace-function-background) ("Untrace function" . untrace-function))
			     (action-transformer anything-c-transform-function-call-interactively)
			     (candidate-transformer anything-c-mark-interactive-functions) (coerce . anything-c-symbolify))
			    (command
			     (action ("Call interactively" . anything-c-call-interactively) ("Describe command" . describe-function)
			      ("Add command to kill ring" . anything-c-kill-new) ("Go to command's definition" . find-function)
			      ("Debug on entry" . debug-on-entry) ("Cancel debug on entry" . cancel-debug-on-entry) ("Trace function" . trace-function)
			      ("Trace function (background)" . trace-function-background) ("Untrace function" . untrace-function))
			     (coerce . anything-c-symbolify) (persistent-action . describe-function))
			    (file
			     (action ("Find file" . anything-find-many-files) ("Find file as root" . anything-find-file-as-root)
			      ("Find file other window" . find-file-other-window) ("Find file other frame" . find-file-other-frame)
			      ("Open dired in file's directory" . anything-c-open-dired) ("Grep File(s) `C-u recurse'" . anything-find-files-grep)
			      ("Zgrep File(s) `C-u Recurse'" . anything-ff-zgrep) ("Pdfgrep File(s)" . anything-ff-pdfgrep)
			      ("Checksum File" . anything-ff-checksum) ("Ediff File" . anything-find-files-ediff-files)
			      ("Ediff Merge File" . anything-find-files-ediff-merge-files) ("View file" . view-file) ("Insert file" . insert-file)
			      ("Delete file(s)" . anything-delete-marked-files) ("Open file externally (C-u to choose)" . anything-c-open-file-externally)
			      ("Open file with default tool" . anything-c-open-file-with-default-tool) ("Find file in hex dump" . hexl-find-file))
			     (persistent-help . "Show this file")
			     (action-transformer anything-c-transform-file-load-el anything-c-transform-file-browse-url)
			     (candidate-transformer anything-c-w32-pathname-transformer anything-c-skip-current-file anything-c-skip-boring-files
			      anything-c-shorten-home-path)
			     )
			    (buffer
			     (action ("Switch to buffer" . anything-c-switch-to-buffer) ("Switch to buffer other window" . switch-to-buffer-other-window)
			      ("Switch to buffer other frame" . switch-to-buffer-other-frame)
			      ("Query replace regexp" . anything-c-buffer-query-replace-regexp) ("Query replace" . anything-c-buffer-query-replace)
			      ("View buffer" . view-buffer) ("Display buffer" . display-buffer)
			      ("Grep buffers (C-u grep all buffers)" . anything-c-grep-buffers) ("Revert buffer(s)" . anything-revert-marked-buffers)
			      ("Insert buffer" . insert-buffer) ("Kill buffer(s)" . anything-kill-marked-buffers)
			      ("Diff with file" . diff-buffer-with-file) ("Ediff Marked buffers" . anything-ediff-marked-buffers)
			      ("Ediff Merge marked buffers" lambda (candidate) (anything-ediff-marked-buffers candidate t)))
			     (persistent-help . "Show this buffer")
			     (candidate-transformer anything-c-skip-current-buffer anything-c-skip-boring-buffers
			      anything-c-transform-buffer-display-string)
			     )
			    )
 anything-types '(buffer file command function variable sexp bookmark line file-line timer)
 anything-update-hook '(anything-mp-highlight-match anything-revive-visible-mark)
 anything-use-multiple-patterns t
 anything-version "1.3.6"
 anything-visible-mark-overlays nil
 anything-w3m-bookmark-url-regexp "\\(https\\|http\\|ftp\\|file\\)://[^>]*"
 anything-w3m-bookmarks-regexp ">\\([^><]+.[^</a>]\\)"
 anything-yank-point nil
 anything-yaoddmuse-use-cache-file nil
 )
======================================================================
nakamura@Dev-isfactory5 /usr/bin
$ pushd 'N:\download\Emacs\plugin\anything'
~/download/Emacs/plugin/anything /usr/bin

nakamura@Dev-isfactory5 ~/download/Emacs/plugin/anything
$ git clone git://repo.or.cz/anything-config.git
Cloning into anything-config...
remote: Counting objects: 7901, done.
remote: Compressing objects: 100% (2725/2725), done.
remote: Total 7901 (delta 4775), reused 7868 (delta 4753)
Receiving objects: 100% (7901/7901), 6.66 MiB | 171 KiB/s, done.
Resolving deltas: 100% (4775/4775), done.

$ view N:\download\Emacs\plugin\anything\anything-config\README

